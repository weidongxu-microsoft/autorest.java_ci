// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mediaservices.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes the basic properties of all codecs.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "@odata.type", defaultImpl = Codec.class, visible = true)
@JsonTypeName("Codec")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "#Microsoft.Media.Audio", value = Audio.class),
    @JsonSubTypes.Type(name = "#Microsoft.Media.Video", value = Video.class),
    @JsonSubTypes.Type(name = "#Microsoft.Media.CopyVideo", value = CopyVideo.class),
    @JsonSubTypes.Type(name = "#Microsoft.Media.CopyAudio", value = CopyAudio.class) })
@Fluent
public class Codec {
    /*
     * The discriminator for derived types.
     */
    @JsonTypeId
    @JsonProperty(value = "@odata.type", required = true)
    private String odataType;

    /*
     * An optional label for the codec. The label can be used to control muxing behavior.
     */
    @JsonProperty(value = "label")
    private String label;

    /**
     * Creates an instance of Codec class.
     */
    public Codec() {
        this.odataType = "Codec";
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    public String odataType() {
        return this.odataType;
    }

    /**
     * Get the label property: An optional label for the codec. The label can be used to control muxing behavior.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: An optional label for the codec. The label can be used to control muxing behavior.
     * 
     * @param label the label value to set.
     * @return the Codec object itself.
     */
    public Codec withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
