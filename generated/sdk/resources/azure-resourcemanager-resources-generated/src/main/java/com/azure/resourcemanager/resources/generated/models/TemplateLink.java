// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.resources.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Entity representing the reference to the template.
 */
@Fluent
public final class TemplateLink implements JsonSerializable<TemplateLink> {
    /*
     * The URI of the template to deploy. Use either the uri or id property, but not both.
     */
    private String uri;

    /*
     * The resource id of a Template Spec. Use either the id or uri property, but not both.
     */
    private String id;

    /*
     * Applicable only if this template link references a Template Spec. This relativePath property can optionally be
     * used to reference a Template Spec artifact by path.
     */
    private String relativePath;

    /*
     * If included, must match the ContentVersion in the template.
     */
    private String contentVersion;

    /**
     * Creates an instance of TemplateLink class.
     */
    public TemplateLink() {
    }

    /**
     * Get the uri property: The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     * @param uri the uri value to set.
     * @return the TemplateLink object itself.
     */
    public TemplateLink withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get the id property: The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     * @param id the id value to set.
     * @return the TemplateLink object itself.
     */
    public TemplateLink withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the relativePath property: Applicable only if this template link references a Template Spec. This
     * relativePath property can optionally be used to reference a Template Spec artifact by path.
     * 
     * @return the relativePath value.
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Set the relativePath property: Applicable only if this template link references a Template Spec. This
     * relativePath property can optionally be used to reference a Template Spec artifact by path.
     * 
     * @param relativePath the relativePath value to set.
     * @return the TemplateLink object itself.
     */
    public TemplateLink withRelativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    /**
     * Get the contentVersion property: If included, must match the ContentVersion in the template.
     * 
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.contentVersion;
    }

    /**
     * Set the contentVersion property: If included, must match the ContentVersion in the template.
     * 
     * @param contentVersion the contentVersion value to set.
     * @return the TemplateLink object itself.
     */
    public TemplateLink withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("uri", this.uri);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("relativePath", this.relativePath);
        jsonWriter.writeStringField("contentVersion", this.contentVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateLink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateLink if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateLink.
     */
    public static TemplateLink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateLink deserializedTemplateLink = new TemplateLink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uri".equals(fieldName)) {
                    deserializedTemplateLink.uri = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedTemplateLink.id = reader.getString();
                } else if ("relativePath".equals(fieldName)) {
                    deserializedTemplateLink.relativePath = reader.getString();
                } else if ("contentVersion".equals(fieldName)) {
                    deserializedTemplateLink.contentVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateLink;
        });
    }
}
