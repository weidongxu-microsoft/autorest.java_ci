// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyCurveName;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyOperation;
import com.azure.resourcemanager.keyvault.generated.models.JsonWebKeyType;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmKeyAttributes;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmKeyReleasePolicy;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmRotationPolicy;
import com.azure.resourcemanager.keyvault.generated.models.ProxyResourceWithoutSystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The key resource. */
@Fluent
public final class ManagedHsmKeyInner extends ProxyResourceWithoutSystemData {
    /*
     * The properties of the key.
     */
    @JsonProperty(value = "properties", required = true)
    private ManagedHsmKeyProperties innerProperties = new ManagedHsmKeyProperties();

    /** Creates an instance of ManagedHsmKeyInner class. */
    public ManagedHsmKeyInner() {
    }

    /**
     * Get the innerProperties property: The properties of the key.
     *
     * @return the innerProperties value.
     */
    private ManagedHsmKeyProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedHsmKeyInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the attributes property: The attributes of the key.
     *
     * @return the attributes value.
     */
    public ManagedHsmKeyAttributes attributes() {
        return this.innerProperties() == null ? null : this.innerProperties().attributes();
    }

    /**
     * Set the attributes property: The attributes of the key.
     *
     * @param attributes the attributes value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withAttributes(ManagedHsmKeyAttributes attributes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withAttributes(attributes);
        return this;
    }

    /**
     * Get the kty property: The type of the key. For valid values, see JsonWebKeyType.
     *
     * @return the kty value.
     */
    public JsonWebKeyType kty() {
        return this.innerProperties() == null ? null : this.innerProperties().kty();
    }

    /**
     * Set the kty property: The type of the key. For valid values, see JsonWebKeyType.
     *
     * @param kty the kty value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withKty(JsonWebKeyType kty) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withKty(kty);
        return this;
    }

    /**
     * Get the keyOps property: The keyOps property.
     *
     * @return the keyOps value.
     */
    public List<JsonWebKeyOperation> keyOps() {
        return this.innerProperties() == null ? null : this.innerProperties().keyOps();
    }

    /**
     * Set the keyOps property: The keyOps property.
     *
     * @param keyOps the keyOps value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withKeyOps(List<JsonWebKeyOperation> keyOps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withKeyOps(keyOps);
        return this;
    }

    /**
     * Get the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     *
     * @return the keySize value.
     */
    public Integer keySize() {
        return this.innerProperties() == null ? null : this.innerProperties().keySize();
    }

    /**
     * Set the keySize property: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     *
     * @param keySize the keySize value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withKeySize(Integer keySize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withKeySize(keySize);
        return this;
    }

    /**
     * Get the curveName property: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     *
     * @return the curveName value.
     */
    public JsonWebKeyCurveName curveName() {
        return this.innerProperties() == null ? null : this.innerProperties().curveName();
    }

    /**
     * Set the curveName property: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     *
     * @param curveName the curveName value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withCurveName(JsonWebKeyCurveName curveName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withCurveName(curveName);
        return this;
    }

    /**
     * Get the keyUri property: The URI to retrieve the current version of the key.
     *
     * @return the keyUri value.
     */
    public String keyUri() {
        return this.innerProperties() == null ? null : this.innerProperties().keyUri();
    }

    /**
     * Get the keyUriWithVersion property: The URI to retrieve the specific version of the key.
     *
     * @return the keyUriWithVersion value.
     */
    public String keyUriWithVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().keyUriWithVersion();
    }

    /**
     * Get the rotationPolicy property: Key rotation policy in response. It will be used for both output and input.
     * Omitted if empty.
     *
     * @return the rotationPolicy value.
     */
    public ManagedHsmRotationPolicy rotationPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().rotationPolicy();
    }

    /**
     * Set the rotationPolicy property: Key rotation policy in response. It will be used for both output and input.
     * Omitted if empty.
     *
     * @param rotationPolicy the rotationPolicy value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withRotationPolicy(ManagedHsmRotationPolicy rotationPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withRotationPolicy(rotationPolicy);
        return this;
    }

    /**
     * Get the releasePolicy property: Key release policy in response. It will be used for both output and input.
     * Omitted if empty.
     *
     * @return the releasePolicy value.
     */
    public ManagedHsmKeyReleasePolicy releasePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().releasePolicy();
    }

    /**
     * Set the releasePolicy property: Key release policy in response. It will be used for both output and input.
     * Omitted if empty.
     *
     * @param releasePolicy the releasePolicy value to set.
     * @return the ManagedHsmKeyInner object itself.
     */
    public ManagedHsmKeyInner withReleasePolicy(ManagedHsmKeyReleasePolicy releasePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedHsmKeyProperties();
        }
        this.innerProperties().withReleasePolicy(releasePolicy);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model ManagedHsmKeyInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedHsmKeyInner.class);
}
