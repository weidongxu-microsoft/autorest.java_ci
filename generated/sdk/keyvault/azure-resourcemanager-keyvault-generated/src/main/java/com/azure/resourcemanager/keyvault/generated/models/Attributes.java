// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * The object attributes managed by the KeyVault service.
 */
@Fluent
public class Attributes {
    /*
     * Determines whether the object is enabled.
     */
    @JsonProperty(value = "enabled")
    private Boolean enabled;

    /*
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     */
    @JsonProperty(value = "nbf")
    private Long notBefore;

    /*
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     */
    @JsonProperty(value = "exp")
    private Long expires;

    /*
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     */
    @JsonProperty(value = "created", access = JsonProperty.Access.WRITE_ONLY)
    private Long created;

    /*
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     */
    @JsonProperty(value = "updated", access = JsonProperty.Access.WRITE_ONLY)
    private Long updated;

    /**
     * Creates an instance of Attributes class.
     */
    public Attributes() {
    }

    /**
     * Get the enabled property: Determines whether the object is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Determines whether the object is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the Attributes object itself.
     */
    public Attributes withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the notBefore property: Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     * @return the notBefore value.
     */
    public OffsetDateTime notBefore() {
        if (this.notBefore == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.notBefore), ZoneOffset.UTC);
    }

    /**
     * Set the notBefore property: Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     * @param notBefore the notBefore value to set.
     * @return the Attributes object itself.
     */
    public Attributes withNotBefore(OffsetDateTime notBefore) {
        if (notBefore == null) {
            this.notBefore = null;
        } else {
            this.notBefore = notBefore.toEpochSecond();
        }
        return this;
    }

    /**
     * Get the expires property: Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     * @return the expires value.
     */
    public OffsetDateTime expires() {
        if (this.expires == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.expires), ZoneOffset.UTC);
    }

    /**
     * Set the expires property: Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     * @param expires the expires value to set.
     * @return the Attributes object itself.
     */
    public Attributes withExpires(OffsetDateTime expires) {
        if (expires == null) {
            this.expires = null;
        } else {
            this.expires = expires.toEpochSecond();
        }
        return this;
    }

    /**
     * Get the created property: Creation time in seconds since 1970-01-01T00:00:00Z.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        if (this.created == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the updated property: Last updated time in seconds since 1970-01-01T00:00:00Z.
     * 
     * @return the updated value.
     */
    public OffsetDateTime updated() {
        if (this.updated == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.updated), ZoneOffset.UTC);
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
