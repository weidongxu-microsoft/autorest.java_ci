// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.keyvault.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.keyvault.generated.fluent.ManagedHsmKeysClient;
import com.azure.resourcemanager.keyvault.generated.fluent.models.ManagedHsmKeyInner;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmKey;
import com.azure.resourcemanager.keyvault.generated.models.ManagedHsmKeys;

public final class ManagedHsmKeysImpl implements ManagedHsmKeys {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedHsmKeysImpl.class);

    private final ManagedHsmKeysClient innerClient;

    private final com.azure.resourcemanager.keyvault.generated.KeyVaultManager serviceManager;

    public ManagedHsmKeysImpl(
        ManagedHsmKeysClient innerClient, com.azure.resourcemanager.keyvault.generated.KeyVaultManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ManagedHsmKey> getWithResponse(
        String resourceGroupName, String name, String keyName, Context context) {
        Response<ManagedHsmKeyInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, name, keyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedHsmKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedHsmKey get(String resourceGroupName, String name, String keyName) {
        ManagedHsmKeyInner inner = this.serviceClient().get(resourceGroupName, name, keyName);
        if (inner != null) {
            return new ManagedHsmKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ManagedHsmKey> list(String resourceGroupName, String name) {
        PagedIterable<ManagedHsmKeyInner> inner = this.serviceClient().list(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new ManagedHsmKeyImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedHsmKey> list(String resourceGroupName, String name, Context context) {
        PagedIterable<ManagedHsmKeyInner> inner = this.serviceClient().list(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new ManagedHsmKeyImpl(inner1, this.manager()));
    }

    public Response<ManagedHsmKey> getVersionWithResponse(
        String resourceGroupName, String name, String keyName, String keyVersion, Context context) {
        Response<ManagedHsmKeyInner> inner =
            this.serviceClient().getVersionWithResponse(resourceGroupName, name, keyName, keyVersion, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedHsmKeyImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagedHsmKey getVersion(String resourceGroupName, String name, String keyName, String keyVersion) {
        ManagedHsmKeyInner inner = this.serviceClient().getVersion(resourceGroupName, name, keyName, keyVersion);
        if (inner != null) {
            return new ManagedHsmKeyImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ManagedHsmKey> listVersions(String resourceGroupName, String name, String keyName) {
        PagedIterable<ManagedHsmKeyInner> inner = this.serviceClient().listVersions(resourceGroupName, name, keyName);
        return Utils.mapPage(inner, inner1 -> new ManagedHsmKeyImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedHsmKey> listVersions(
        String resourceGroupName, String name, String keyName, Context context) {
        PagedIterable<ManagedHsmKeyInner> inner =
            this.serviceClient().listVersions(resourceGroupName, name, keyName, context);
        return Utils.mapPage(inner, inner1 -> new ManagedHsmKeyImpl(inner1, this.manager()));
    }

    public ManagedHsmKey getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "managedHSMs");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'managedHSMs'.", id)));
        }
        String keyName = Utils.getValueFromIdByName(id, "keys");
        if (keyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keys'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, keyName, Context.NONE).getValue();
    }

    public Response<ManagedHsmKey> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "managedHSMs");
        if (name == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'managedHSMs'.", id)));
        }
        String keyName = Utils.getValueFromIdByName(id, "keys");
        if (keyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'keys'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, keyName, context);
    }

    private ManagedHsmKeysClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.keyvault.generated.KeyVaultManager manager() {
        return this.serviceManager;
    }

    public ManagedHsmKeyImpl define(String name) {
        return new ManagedHsmKeyImpl(name, this.manager());
    }
}
