// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.consumption.generated.models.Amount;
import com.azure.resourcemanager.consumption.generated.models.AmountWithExchangeRate;
import com.azure.resourcemanager.consumption.generated.models.LotSource;
import com.azure.resourcemanager.consumption.generated.models.OrganizationType;
import com.azure.resourcemanager.consumption.generated.models.Reseller;
import com.azure.resourcemanager.consumption.generated.models.Status;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * A lot summary resource.
 */
@Fluent
public final class LotSummaryInner extends ProxyResource {
    /*
     * The lot properties.
     */
    private LotProperties innerProperties;

    /*
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user
     * is updating the latest version or not.
     */
    private String etag;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of LotSummaryInner class.
     */
    public LotSummaryInner() {
    }

    /**
     * Get the innerProperties property: The lot properties.
     * 
     * @return the innerProperties value.
     */
    private LotProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: eTag of the resource. To handle concurrent update scenario, this field will be used to
     * determine whether the user is updating the latest version or not.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: eTag of the resource. To handle concurrent update scenario, this field will be used to
     * determine whether the user is updating the latest version or not.
     * 
     * @param etag the etag value to set.
     * @return the LotSummaryInner object itself.
     */
    public LotSummaryInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the originalAmount property: The original amount of a lot, Note: This will not be returned for Contributor
     * Organization Type in Multi-Entity consumption commitment.
     * 
     * @return the originalAmount value.
     */
    public Amount originalAmount() {
        return this.innerProperties() == null ? null : this.innerProperties().originalAmount();
    }

    /**
     * Get the closedBalance property: The balance as of the last invoice.
     * 
     * @return the closedBalance value.
     */
    public Amount closedBalance() {
        return this.innerProperties() == null ? null : this.innerProperties().closedBalance();
    }

    /**
     * Get the source property: The source of the lot.
     * 
     * @return the source value.
     */
    public LotSource source() {
        return this.innerProperties() == null ? null : this.innerProperties().source();
    }

    /**
     * Get the startDate property: The date when the lot became effective.
     * 
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.innerProperties() == null ? null : this.innerProperties().startDate();
    }

    /**
     * Get the expirationDate property: The expiration date of a lot.
     * 
     * @return the expirationDate value.
     */
    public OffsetDateTime expirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().expirationDate();
    }

    /**
     * Get the poNumber property: The po number of the invoice on which the lot was added. This property is not
     * available for ConsumptionCommitment lots.
     * 
     * @return the poNumber value.
     */
    public String poNumber() {
        return this.innerProperties() == null ? null : this.innerProperties().poNumber();
    }

    /**
     * Get the purchasedDate property: The date when the lot was added.
     * 
     * @return the purchasedDate value.
     */
    public OffsetDateTime purchasedDate() {
        return this.innerProperties() == null ? null : this.innerProperties().purchasedDate();
    }

    /**
     * Get the status property: The status of the lot.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the creditCurrency property: The currency of the lot.
     * 
     * @return the creditCurrency value.
     */
    public String creditCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().creditCurrency();
    }

    /**
     * Get the billingCurrency property: The billing currency of the lot.
     * 
     * @return the billingCurrency value.
     */
    public String billingCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().billingCurrency();
    }

    /**
     * Get the originalAmountInBillingCurrency property: The original amount of a lot in billing currency, Note: This
     * will not be returned for Contributor Organization Type in Multi-Entity consumption commitment.
     * 
     * @return the originalAmountInBillingCurrency value.
     */
    public AmountWithExchangeRate originalAmountInBillingCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().originalAmountInBillingCurrency();
    }

    /**
     * Get the closedBalanceInBillingCurrency property: The balance as of the last invoice in billing currency.
     * 
     * @return the closedBalanceInBillingCurrency value.
     */
    public AmountWithExchangeRate closedBalanceInBillingCurrency() {
        return this.innerProperties() == null ? null : this.innerProperties().closedBalanceInBillingCurrency();
    }

    /**
     * Get the reseller property: The reseller of the lot.
     * 
     * @return the reseller value.
     */
    public Reseller reseller() {
        return this.innerProperties() == null ? null : this.innerProperties().reseller();
    }

    /**
     * Get the isEstimatedBalance property: If true, the listed details are based on an estimation and it will be
     * subjected to change.
     * 
     * @return the isEstimatedBalance value.
     */
    public Boolean isEstimatedBalance() {
        return this.innerProperties() == null ? null : this.innerProperties().isEstimatedBalance();
    }

    /**
     * Get the etag property: The eTag for the resource.
     * 
     * @return the etag value.
     */
    public String etagPropertiesEtag() {
        return this.innerProperties() == null ? null : this.innerProperties().etag();
    }

    /**
     * Get the organizationType property: The organization type of the lot.
     * 
     * @return the organizationType value.
     */
    public OrganizationType organizationType() {
        return this.innerProperties() == null ? null : this.innerProperties().organizationType();
    }

    /**
     * Get the usedAmount property: Amount consumed from the commitment.
     * 
     * @return the usedAmount value.
     */
    public Amount usedAmount() {
        return this.innerProperties() == null ? null : this.innerProperties().usedAmount();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("eTag", this.etag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LotSummaryInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LotSummaryInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LotSummaryInner.
     */
    public static LotSummaryInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LotSummaryInner deserializedLotSummaryInner = new LotSummaryInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLotSummaryInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLotSummaryInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLotSummaryInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedLotSummaryInner.innerProperties = LotProperties.fromJson(reader);
                } else if ("eTag".equals(fieldName)) {
                    deserializedLotSummaryInner.etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLotSummaryInner;
        });
    }
}
