// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The properties of the price sheet download.
 */
@Immutable
public final class PricesheetDownloadProperties implements JsonSerializable<PricesheetDownloadProperties> {
    /*
     * The link (url) to download the pricesheet.
     */
    private String downloadUrl;

    /*
     * Download link validity.
     */
    private OffsetDateTime validTill;

    /**
     * Creates an instance of PricesheetDownloadProperties class.
     */
    public PricesheetDownloadProperties() {
    }

    /**
     * Get the downloadUrl property: The link (url) to download the pricesheet.
     * 
     * @return the downloadUrl value.
     */
    public String downloadUrl() {
        return this.downloadUrl;
    }

    /**
     * Get the validTill property: Download link validity.
     * 
     * @return the validTill value.
     */
    public OffsetDateTime validTill() {
        return this.validTill;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PricesheetDownloadProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PricesheetDownloadProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PricesheetDownloadProperties.
     */
    public static PricesheetDownloadProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PricesheetDownloadProperties deserializedPricesheetDownloadProperties = new PricesheetDownloadProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("downloadUrl".equals(fieldName)) {
                    deserializedPricesheetDownloadProperties.downloadUrl = reader.getString();
                } else if ("validTill".equals(fieldName)) {
                    deserializedPricesheetDownloadProperties.validTill = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPricesheetDownloadProperties;
        });
    }
}
