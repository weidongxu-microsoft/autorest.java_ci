// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.consumption.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.consumption.generated.models.ChargeType;
import com.azure.resourcemanager.consumption.generated.models.ForecastPropertiesConfidenceLevelsItem;
import com.azure.resourcemanager.consumption.generated.models.Grain;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

/** A forecast resource. */
@Fluent
public final class ForecastInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ForecastInner.class);

    /*
     * The properties of the forecast charge.
     */
    @JsonProperty(value = "properties")
    private ForecastProperties innerProperties;

    /*
     * The etag for the resource.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /**
     * Get the innerProperties property: The properties of the forecast charge.
     *
     * @return the innerProperties value.
     */
    private ForecastProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the etag property: The etag for the resource.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Get the usageDate property: The usage date of the forecast.
     *
     * @return the usageDate value.
     */
    public String usageDate() {
        return this.innerProperties() == null ? null : this.innerProperties().usageDate();
    }

    /**
     * Get the grain property: The granularity of forecast. Please note that Yearly is not currently supported in this
     * API. The API will provide responses in the Monthly grain if Yearly is selected. To get yearly grain data, please
     * use our newer Forecast API.
     *
     * @return the grain value.
     */
    public Grain grain() {
        return this.innerProperties() == null ? null : this.innerProperties().grain();
    }

    /**
     * Set the grain property: The granularity of forecast. Please note that Yearly is not currently supported in this
     * API. The API will provide responses in the Monthly grain if Yearly is selected. To get yearly grain data, please
     * use our newer Forecast API.
     *
     * @param grain the grain value to set.
     * @return the ForecastInner object itself.
     */
    public ForecastInner withGrain(Grain grain) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ForecastProperties();
        }
        this.innerProperties().withGrain(grain);
        return this;
    }

    /**
     * Get the charge property: The amount of charge.
     *
     * @return the charge value.
     */
    public BigDecimal charge() {
        return this.innerProperties() == null ? null : this.innerProperties().charge();
    }

    /**
     * Get the currency property: The ISO currency in which the meter is charged, for example, USD.
     *
     * @return the currency value.
     */
    public String currency() {
        return this.innerProperties() == null ? null : this.innerProperties().currency();
    }

    /**
     * Get the chargeType property: The type of the charge. Could be actual or forecast.
     *
     * @return the chargeType value.
     */
    public ChargeType chargeType() {
        return this.innerProperties() == null ? null : this.innerProperties().chargeType();
    }

    /**
     * Set the chargeType property: The type of the charge. Could be actual or forecast.
     *
     * @param chargeType the chargeType value to set.
     * @return the ForecastInner object itself.
     */
    public ForecastInner withChargeType(ChargeType chargeType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ForecastProperties();
        }
        this.innerProperties().withChargeType(chargeType);
        return this;
    }

    /**
     * Get the confidenceLevels property: The details about the forecast confidence levels. This is populated only when
     * chargeType is Forecast.
     *
     * @return the confidenceLevels value.
     */
    public List<ForecastPropertiesConfidenceLevelsItem> confidenceLevels() {
        return this.innerProperties() == null ? null : this.innerProperties().confidenceLevels();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
