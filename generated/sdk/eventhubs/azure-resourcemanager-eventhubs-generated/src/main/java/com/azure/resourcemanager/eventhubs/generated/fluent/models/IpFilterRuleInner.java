// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventhubs.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.eventhubs.generated.models.IpAction;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Single item in a List or Get IpFilterRules operation. */
@Fluent
public final class IpFilterRuleInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IpFilterRuleInner.class);

    /*
     * Properties supplied to create or update IpFilterRules
     */
    @JsonProperty(value = "properties")
    private IpFilterRuleProperties innerProperties;

    /**
     * Get the innerProperties property: Properties supplied to create or update IpFilterRules.
     *
     * @return the innerProperties value.
     */
    private IpFilterRuleProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the ipMask property: IP Mask.
     *
     * @return the ipMask value.
     */
    public String ipMask() {
        return this.innerProperties() == null ? null : this.innerProperties().ipMask();
    }

    /**
     * Set the ipMask property: IP Mask.
     *
     * @param ipMask the ipMask value to set.
     * @return the IpFilterRuleInner object itself.
     */
    public IpFilterRuleInner withIpMask(String ipMask) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IpFilterRuleProperties();
        }
        this.innerProperties().withIpMask(ipMask);
        return this;
    }

    /**
     * Get the action property: The IP Filter Action.
     *
     * @return the action value.
     */
    public IpAction action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The IP Filter Action.
     *
     * @param action the action value to set.
     * @return the IpFilterRuleInner object itself.
     */
    public IpFilterRuleInner withAction(IpAction action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IpFilterRuleProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Get the filterName property: IP Filter name.
     *
     * @return the filterName value.
     */
    public String filterName() {
        return this.innerProperties() == null ? null : this.innerProperties().filterName();
    }

    /**
     * Set the filterName property: IP Filter name.
     *
     * @param filterName the filterName value to set.
     * @return the IpFilterRuleInner object itself.
     */
    public IpFilterRuleInner withFilterName(String filterName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IpFilterRuleProperties();
        }
        this.innerProperties().withFilterName(filterName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
