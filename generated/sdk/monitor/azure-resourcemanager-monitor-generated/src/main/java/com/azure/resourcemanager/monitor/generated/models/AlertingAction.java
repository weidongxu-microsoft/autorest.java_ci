// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specify action need to be taken when rule type is Alert.
 */
@Fluent
public final class AlertingAction extends Action {
    /*
     * Severity of the alert
     */
    private AlertSeverity severity;

    /*
     * Azure action group reference.
     */
    private AzNsActionGroup aznsAction;

    /*
     * time (in minutes) for which Alerts should be throttled or suppressed.
     */
    private Integer throttlingInMin;

    /*
     * The trigger condition that results in the alert rule being.
     */
    private TriggerCondition trigger;

    /**
     * Creates an instance of AlertingAction class.
     */
    public AlertingAction() {
        this.odataType
            = "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction";
    }

    /**
     * Get the severity property: Severity of the alert.
     * 
     * @return the severity value.
     */
    public AlertSeverity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the alert.
     * 
     * @param severity the severity value to set.
     * @return the AlertingAction object itself.
     */
    public AlertingAction withSeverity(AlertSeverity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the aznsAction property: Azure action group reference.
     * 
     * @return the aznsAction value.
     */
    public AzNsActionGroup aznsAction() {
        return this.aznsAction;
    }

    /**
     * Set the aznsAction property: Azure action group reference.
     * 
     * @param aznsAction the aznsAction value to set.
     * @return the AlertingAction object itself.
     */
    public AlertingAction withAznsAction(AzNsActionGroup aznsAction) {
        this.aznsAction = aznsAction;
        return this;
    }

    /**
     * Get the throttlingInMin property: time (in minutes) for which Alerts should be throttled or suppressed.
     * 
     * @return the throttlingInMin value.
     */
    public Integer throttlingInMin() {
        return this.throttlingInMin;
    }

    /**
     * Set the throttlingInMin property: time (in minutes) for which Alerts should be throttled or suppressed.
     * 
     * @param throttlingInMin the throttlingInMin value to set.
     * @return the AlertingAction object itself.
     */
    public AlertingAction withThrottlingInMin(Integer throttlingInMin) {
        this.throttlingInMin = throttlingInMin;
        return this;
    }

    /**
     * Get the trigger property: The trigger condition that results in the alert rule being.
     * 
     * @return the trigger value.
     */
    public TriggerCondition trigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The trigger condition that results in the alert rule being.
     * 
     * @param trigger the trigger value to set.
     * @return the AlertingAction object itself.
     */
    public AlertingAction withTrigger(TriggerCondition trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (severity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property severity in model AlertingAction"));
        }
        if (aznsAction() != null) {
            aznsAction().validate();
        }
        if (trigger() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property trigger in model AlertingAction"));
        } else {
            trigger().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AlertingAction.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeJsonField("trigger", this.trigger);
        jsonWriter.writeJsonField("aznsAction", this.aznsAction);
        jsonWriter.writeNumberField("throttlingInMin", this.throttlingInMin);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertingAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertingAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertingAction.
     */
    public static AlertingAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertingAction deserializedAlertingAction = new AlertingAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("severity".equals(fieldName)) {
                    deserializedAlertingAction.severity = AlertSeverity.fromString(reader.getString());
                } else if ("trigger".equals(fieldName)) {
                    deserializedAlertingAction.trigger = TriggerCondition.fromJson(reader);
                } else if ("odata.type".equals(fieldName)) {
                    deserializedAlertingAction.odataType = reader.getString();
                } else if ("aznsAction".equals(fieldName)) {
                    deserializedAlertingAction.aznsAction = AzNsActionGroup.fromJson(reader);
                } else if ("throttlingInMin".equals(fieldName)) {
                    deserializedAlertingAction.throttlingInMin = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertingAction;
        });
    }
}
