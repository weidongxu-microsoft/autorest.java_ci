// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies the criteria for converting log to metric.
 */
@Fluent
public final class Criteria implements JsonSerializable<Criteria> {
    /*
     * Name of the metric
     */
    private String metricName;

    /*
     * List of Dimensions for creating metric
     */
    private List<Dimension> dimensions;

    /**
     * Creates an instance of Criteria class.
     */
    public Criteria() {
    }

    /**
     * Get the metricName property: Name of the metric.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: Name of the metric.
     * 
     * @param metricName the metricName value to set.
     * @return the Criteria object itself.
     */
    public Criteria withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the dimensions property: List of Dimensions for creating metric.
     * 
     * @return the dimensions value.
     */
    public List<Dimension> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: List of Dimensions for creating metric.
     * 
     * @param dimensions the dimensions value to set.
     * @return the Criteria object itself.
     */
    public Criteria withDimensions(List<Dimension> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property metricName in model Criteria"));
        }
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Criteria.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Criteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Criteria if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Criteria.
     */
    public static Criteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Criteria deserializedCriteria = new Criteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricName".equals(fieldName)) {
                    deserializedCriteria.metricName = reader.getString();
                } else if ("dimensions".equals(fieldName)) {
                    List<Dimension> dimensions = reader.readArray(reader1 -> Dimension.fromJson(reader1));
                    deserializedCriteria.dimensions = dimensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCriteria;
        });
    }
}
