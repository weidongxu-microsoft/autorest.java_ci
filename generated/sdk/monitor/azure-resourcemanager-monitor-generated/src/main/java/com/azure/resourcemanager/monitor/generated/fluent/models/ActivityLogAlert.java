// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.monitor.generated.models.ActivityLogAlertActionList;
import com.azure.resourcemanager.monitor.generated.models.ActivityLogAlertAllOfCondition;
import java.io.IOException;
import java.util.List;

/**
 * An Azure activity log alert.
 */
@Fluent
public final class ActivityLogAlert implements JsonSerializable<ActivityLogAlert> {
    /*
     * A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds
     * that fall under one of these prefixes. This list must include at least one item.
     */
    private List<String> scopes;

    /*
     * Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its
     * actions will be activated.
     */
    private Boolean enabled;

    /*
     * The condition that will cause this alert to activate.
     */
    private ActivityLogAlertAllOfCondition condition;

    /*
     * The actions that will activate when the condition is met.
     */
    private ActivityLogAlertActionList actions;

    /*
     * A description of this activity log alert.
     */
    private String description;

    /**
     * Creates an instance of ActivityLogAlert class.
     */
    public ActivityLogAlert() {
    }

    /**
     * Get the scopes property: A list of resourceIds that will be used as prefixes. The alert will only apply to
     * activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: A list of resourceIds that will be used as prefixes. The alert will only apply to
     * activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item.
     * 
     * @param scopes the scopes value to set.
     * @return the ActivityLogAlert object itself.
     */
    public ActivityLogAlert withScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Get the enabled property: Indicates whether this activity log alert is enabled. If an activity log alert is not
     * enabled, then none of its actions will be activated.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates whether this activity log alert is enabled. If an activity log alert is not
     * enabled, then none of its actions will be activated.
     * 
     * @param enabled the enabled value to set.
     * @return the ActivityLogAlert object itself.
     */
    public ActivityLogAlert withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the condition property: The condition that will cause this alert to activate.
     * 
     * @return the condition value.
     */
    public ActivityLogAlertAllOfCondition condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The condition that will cause this alert to activate.
     * 
     * @param condition the condition value to set.
     * @return the ActivityLogAlert object itself.
     */
    public ActivityLogAlert withCondition(ActivityLogAlertAllOfCondition condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the actions property: The actions that will activate when the condition is met.
     * 
     * @return the actions value.
     */
    public ActivityLogAlertActionList actions() {
        return this.actions;
    }

    /**
     * Set the actions property: The actions that will activate when the condition is met.
     * 
     * @param actions the actions value to set.
     * @return the ActivityLogAlert object itself.
     */
    public ActivityLogAlert withActions(ActivityLogAlertActionList actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the description property: A description of this activity log alert.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of this activity log alert.
     * 
     * @param description the description value to set.
     * @return the ActivityLogAlert object itself.
     */
    public ActivityLogAlert withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scopes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property scopes in model ActivityLogAlert"));
        }
        if (condition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property condition in model ActivityLogAlert"));
        } else {
            condition().validate();
        }
        if (actions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property actions in model ActivityLogAlert"));
        } else {
            actions().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActivityLogAlert.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("condition", this.condition);
        jsonWriter.writeJsonField("actions", this.actions);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActivityLogAlert from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActivityLogAlert if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActivityLogAlert.
     */
    public static ActivityLogAlert fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActivityLogAlert deserializedActivityLogAlert = new ActivityLogAlert();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedActivityLogAlert.scopes = scopes;
                } else if ("condition".equals(fieldName)) {
                    deserializedActivityLogAlert.condition = ActivityLogAlertAllOfCondition.fromJson(reader);
                } else if ("actions".equals(fieldName)) {
                    deserializedActivityLogAlert.actions = ActivityLogAlertActionList.fromJson(reader);
                } else if ("enabled".equals(fieldName)) {
                    deserializedActivityLogAlert.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedActivityLogAlert.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActivityLogAlert;
        });
    }
}
