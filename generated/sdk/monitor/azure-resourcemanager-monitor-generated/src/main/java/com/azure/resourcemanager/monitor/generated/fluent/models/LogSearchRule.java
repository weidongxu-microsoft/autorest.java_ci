// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.monitor.generated.models.Action;
import com.azure.resourcemanager.monitor.generated.models.Enabled;
import com.azure.resourcemanager.monitor.generated.models.ProvisioningState;
import com.azure.resourcemanager.monitor.generated.models.Schedule;
import com.azure.resourcemanager.monitor.generated.models.Source;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Log Search Rule Definition.
 */
@Fluent
public final class LogSearchRule implements JsonSerializable<LogSearchRule> {
    /*
     * The api-version used when creating this alert rule
     */
    private String createdWithApiVersion;

    /*
     * True if alert rule is legacy Log Analytic rule
     */
    private Boolean isLegacyLogAnalyticsRule;

    /*
     * The description of the Log Search rule.
     */
    private String description;

    /*
     * The display name of the alert rule
     */
    private String displayName;

    /*
     * The flag that indicates whether the alert should be automatically resolved or not. The default is false.
     */
    private Boolean autoMitigate;

    /*
     * The flag which indicates whether the Log Search rule is enabled. Value should be true or false
     */
    private Enabled enabled;

    /*
     * Last time the rule was updated in IS08601 format.
     */
    private OffsetDateTime lastUpdatedTime;

    /*
     * Provisioning state of the scheduled query rule
     */
    private ProvisioningState provisioningState;

    /*
     * Data Source against which rule will Query Data
     */
    private Source source;

    /*
     * Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
     */
    private Schedule schedule;

    /*
     * Action needs to be taken on rule execution.
     */
    private Action action;

    /**
     * Creates an instance of LogSearchRule class.
     */
    public LogSearchRule() {
    }

    /**
     * Get the createdWithApiVersion property: The api-version used when creating this alert rule.
     * 
     * @return the createdWithApiVersion value.
     */
    public String createdWithApiVersion() {
        return this.createdWithApiVersion;
    }

    /**
     * Get the isLegacyLogAnalyticsRule property: True if alert rule is legacy Log Analytic rule.
     * 
     * @return the isLegacyLogAnalyticsRule value.
     */
    public Boolean isLegacyLogAnalyticsRule() {
        return this.isLegacyLogAnalyticsRule;
    }

    /**
     * Get the description property: The description of the Log Search rule.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the Log Search rule.
     * 
     * @param description the description value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: The display name of the alert rule.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the alert rule.
     * 
     * @param displayName the displayName value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the autoMitigate property: The flag that indicates whether the alert should be automatically resolved or not.
     * The default is false.
     * 
     * @return the autoMitigate value.
     */
    public Boolean autoMitigate() {
        return this.autoMitigate;
    }

    /**
     * Set the autoMitigate property: The flag that indicates whether the alert should be automatically resolved or not.
     * The default is false.
     * 
     * @param autoMitigate the autoMitigate value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withAutoMitigate(Boolean autoMitigate) {
        this.autoMitigate = autoMitigate;
        return this;
    }

    /**
     * Get the enabled property: The flag which indicates whether the Log Search rule is enabled. Value should be true
     * or false.
     * 
     * @return the enabled value.
     */
    public Enabled enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The flag which indicates whether the Log Search rule is enabled. Value should be true
     * or false.
     * 
     * @param enabled the enabled value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withEnabled(Enabled enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the lastUpdatedTime property: Last time the rule was updated in IS08601 format.
     * 
     * @return the lastUpdatedTime value.
     */
    public OffsetDateTime lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Get the provisioningState property: Provisioning state of the scheduled query rule.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the source property: Data Source against which rule will Query Data.
     * 
     * @return the source value.
     */
    public Source source() {
        return this.source;
    }

    /**
     * Set the source property: Data Source against which rule will Query Data.
     * 
     * @param source the source value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withSource(Source source) {
        this.source = source;
        return this;
    }

    /**
     * Get the schedule property: Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction.
     * 
     * @return the schedule value.
     */
    public Schedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction.
     * 
     * @param schedule the schedule value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withSchedule(Schedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the action property: Action needs to be taken on rule execution.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: Action needs to be taken on rule execution.
     * 
     * @param action the action value to set.
     * @return the LogSearchRule object itself.
     */
    public LogSearchRule withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (source() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property source in model LogSearchRule"));
        } else {
            source().validate();
        }
        if (schedule() != null) {
            schedule().validate();
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model LogSearchRule"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LogSearchRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("action", this.action);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeBooleanField("autoMitigate", this.autoMitigate);
        jsonWriter.writeStringField("enabled", this.enabled == null ? null : this.enabled.toString());
        jsonWriter.writeJsonField("schedule", this.schedule);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogSearchRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogSearchRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LogSearchRule.
     */
    public static LogSearchRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogSearchRule deserializedLogSearchRule = new LogSearchRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("source".equals(fieldName)) {
                    deserializedLogSearchRule.source = Source.fromJson(reader);
                } else if ("action".equals(fieldName)) {
                    deserializedLogSearchRule.action = Action.fromJson(reader);
                } else if ("createdWithApiVersion".equals(fieldName)) {
                    deserializedLogSearchRule.createdWithApiVersion = reader.getString();
                } else if ("isLegacyLogAnalyticsRule".equals(fieldName)) {
                    deserializedLogSearchRule.isLegacyLogAnalyticsRule = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedLogSearchRule.description = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedLogSearchRule.displayName = reader.getString();
                } else if ("autoMitigate".equals(fieldName)) {
                    deserializedLogSearchRule.autoMitigate = reader.getNullable(JsonReader::getBoolean);
                } else if ("enabled".equals(fieldName)) {
                    deserializedLogSearchRule.enabled = Enabled.fromString(reader.getString());
                } else if ("lastUpdatedTime".equals(fieldName)) {
                    deserializedLogSearchRule.lastUpdatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLogSearchRule.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("schedule".equals(fieldName)) {
                    deserializedLogSearchRule.schedule = Schedule.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogSearchRule;
        });
    }
}
