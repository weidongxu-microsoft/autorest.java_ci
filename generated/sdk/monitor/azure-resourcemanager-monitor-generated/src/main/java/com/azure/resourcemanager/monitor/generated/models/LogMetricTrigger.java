// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A log metrics trigger descriptor.
 */
@Fluent
public final class LogMetricTrigger implements JsonSerializable<LogMetricTrigger> {
    /*
     * Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
     */
    private ConditionalOperator thresholdOperator;

    /*
     * The threshold of the metric trigger.
     */
    private Double threshold;

    /*
     * Metric Trigger Type - 'Consecutive' or 'Total'
     */
    private MetricTriggerType metricTriggerType;

    /*
     * Evaluation of metric on a particular column
     */
    private String metricColumn;

    /**
     * Creates an instance of LogMetricTrigger class.
     */
    public LogMetricTrigger() {
    }

    /**
     * Get the thresholdOperator property: Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
     * 
     * @return the thresholdOperator value.
     */
    public ConditionalOperator thresholdOperator() {
        return this.thresholdOperator;
    }

    /**
     * Set the thresholdOperator property: Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
     * 
     * @param thresholdOperator the thresholdOperator value to set.
     * @return the LogMetricTrigger object itself.
     */
    public LogMetricTrigger withThresholdOperator(ConditionalOperator thresholdOperator) {
        this.thresholdOperator = thresholdOperator;
        return this;
    }

    /**
     * Get the threshold property: The threshold of the metric trigger.
     * 
     * @return the threshold value.
     */
    public Double threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold of the metric trigger.
     * 
     * @param threshold the threshold value to set.
     * @return the LogMetricTrigger object itself.
     */
    public LogMetricTrigger withThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the metricTriggerType property: Metric Trigger Type - 'Consecutive' or 'Total'.
     * 
     * @return the metricTriggerType value.
     */
    public MetricTriggerType metricTriggerType() {
        return this.metricTriggerType;
    }

    /**
     * Set the metricTriggerType property: Metric Trigger Type - 'Consecutive' or 'Total'.
     * 
     * @param metricTriggerType the metricTriggerType value to set.
     * @return the LogMetricTrigger object itself.
     */
    public LogMetricTrigger withMetricTriggerType(MetricTriggerType metricTriggerType) {
        this.metricTriggerType = metricTriggerType;
        return this;
    }

    /**
     * Get the metricColumn property: Evaluation of metric on a particular column.
     * 
     * @return the metricColumn value.
     */
    public String metricColumn() {
        return this.metricColumn;
    }

    /**
     * Set the metricColumn property: Evaluation of metric on a particular column.
     * 
     * @param metricColumn the metricColumn value to set.
     * @return the LogMetricTrigger object itself.
     */
    public LogMetricTrigger withMetricColumn(String metricColumn) {
        this.metricColumn = metricColumn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("thresholdOperator",
            this.thresholdOperator == null ? null : this.thresholdOperator.toString());
        jsonWriter.writeNumberField("threshold", this.threshold);
        jsonWriter.writeStringField("metricTriggerType",
            this.metricTriggerType == null ? null : this.metricTriggerType.toString());
        jsonWriter.writeStringField("metricColumn", this.metricColumn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogMetricTrigger from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogMetricTrigger if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogMetricTrigger.
     */
    public static LogMetricTrigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogMetricTrigger deserializedLogMetricTrigger = new LogMetricTrigger();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("thresholdOperator".equals(fieldName)) {
                    deserializedLogMetricTrigger.thresholdOperator = ConditionalOperator.fromString(reader.getString());
                } else if ("threshold".equals(fieldName)) {
                    deserializedLogMetricTrigger.threshold = reader.getNullable(JsonReader::getDouble);
                } else if ("metricTriggerType".equals(fieldName)) {
                    deserializedLogMetricTrigger.metricTriggerType = MetricTriggerType.fromString(reader.getString());
                } else if ("metricColumn".equals(fieldName)) {
                    deserializedLogMetricTrigger.metricColumn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogMetricTrigger;
        });
    }
}
