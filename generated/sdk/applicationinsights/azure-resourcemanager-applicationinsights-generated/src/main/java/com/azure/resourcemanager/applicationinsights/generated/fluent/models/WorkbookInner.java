// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.applicationinsights.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.applicationinsights.generated.models.SharedTypeKind;
import com.azure.resourcemanager.applicationinsights.generated.models.WorkbookResource;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An Application Insights workbook definition.
 */
@Fluent
public final class WorkbookInner extends WorkbookResource {
    /*
     * The kind of workbook. Choices are user and shared.
     */
    private SharedTypeKind kind;

    /*
     * Metadata describing a web test for an Azure resource.
     */
    private WorkbookProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of WorkbookInner class.
     */
    public WorkbookInner() {
    }

    /**
     * Get the kind property: The kind of workbook. Choices are user and shared.
     * 
     * @return the kind value.
     */
    public SharedTypeKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of workbook. Choices are user and shared.
     * 
     * @param kind the kind value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withKind(SharedTypeKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the innerProperties property: Metadata describing a web test for an Azure resource.
     * 
     * @return the innerProperties value.
     */
    private WorkbookProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkbookInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkbookInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the name property: The user-defined name of the workbook.
     * 
     * @return the name value.
     */
    public String namePropertiesName() {
        return this.innerProperties() == null ? null : this.innerProperties().name();
    }

    /**
     * Set the name property: The user-defined name of the workbook.
     * 
     * @param name the name value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withNamePropertiesName(String name) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withName(name);
        return this;
    }

    /**
     * Get the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @return the serializedData value.
     */
    public String serializedData() {
        return this.innerProperties() == null ? null : this.innerProperties().serializedData();
    }

    /**
     * Set the serializedData property: Configuration of this particular workbook. Configuration data is a string
     * containing valid JSON.
     * 
     * @param serializedData the serializedData value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withSerializedData(String serializedData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withSerializedData(serializedData);
        return this;
    }

    /**
     * Get the version property: This instance's version of the data model. This can change as new features are added
     * that can be marked workbook.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: This instance's version of the data model. This can change as new features are added
     * that can be marked workbook.
     * 
     * @param version the version value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withVersion(String version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the workbookId property: Internally assigned unique id of the workbook definition.
     * 
     * @return the workbookId value.
     */
    public String workbookId() {
        return this.innerProperties() == null ? null : this.innerProperties().workbookId();
    }

    /**
     * Set the workbookId property: Internally assigned unique id of the workbook definition.
     * 
     * @param workbookId the workbookId value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withWorkbookId(String workbookId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withWorkbookId(workbookId);
        return this;
    }

    /**
     * Get the sharedTypeKind property: Enum indicating if this workbook definition is owned by a specific user or is
     * shared between all users with access to the Application Insights component.
     * 
     * @return the sharedTypeKind value.
     */
    public SharedTypeKind sharedTypeKind() {
        return this.innerProperties() == null ? null : this.innerProperties().sharedTypeKind();
    }

    /**
     * Set the sharedTypeKind property: Enum indicating if this workbook definition is owned by a specific user or is
     * shared between all users with access to the Application Insights component.
     * 
     * @param sharedTypeKind the sharedTypeKind value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withSharedTypeKind(SharedTypeKind sharedTypeKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withSharedTypeKind(sharedTypeKind);
        return this;
    }

    /**
     * Get the timeModified property: Date and time in UTC of the last modification that was made to this workbook
     * definition.
     * 
     * @return the timeModified value.
     */
    public String timeModified() {
        return this.innerProperties() == null ? null : this.innerProperties().timeModified();
    }

    /**
     * Get the category property: Workbook category, as defined by the user at creation time.
     * 
     * @return the category value.
     */
    public String category() {
        return this.innerProperties() == null ? null : this.innerProperties().category();
    }

    /**
     * Set the category property: Workbook category, as defined by the user at creation time.
     * 
     * @param category the category value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withCategory(String category) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withCategory(category);
        return this;
    }

    /**
     * Get the tags property: A list of 0 or more tags that are associated with this workbook definition.
     * 
     * @return the tags value.
     */
    public List<String> tagsPropertiesTags() {
        return this.innerProperties() == null ? null : this.innerProperties().tags();
    }

    /**
     * Set the tags property: A list of 0 or more tags that are associated with this workbook definition.
     * 
     * @param tags the tags value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withTagsPropertiesTags(List<String> tags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withTags(tags);
        return this;
    }

    /**
     * Get the userId property: Unique user id of the specific user that owns this workbook.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.innerProperties() == null ? null : this.innerProperties().userId();
    }

    /**
     * Set the userId property: Unique user id of the specific user that owns this workbook.
     * 
     * @param userId the userId value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withUserId(String userId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withUserId(userId);
        return this;
    }

    /**
     * Get the sourceResourceId property: Optional resourceId for a source resource.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceResourceId();
    }

    /**
     * Set the sourceResourceId property: Optional resourceId for a source resource.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the WorkbookInner object itself.
     */
    public WorkbookInner withSourceResourceId(String sourceResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkbookProperties();
        }
        this.innerProperties().withSourceResourceId(sourceResourceId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model WorkbookInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WorkbookInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkbookInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkbookInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkbookInner.
     */
    public static WorkbookInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkbookInner deserializedWorkbookInner = new WorkbookInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWorkbookInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedWorkbookInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWorkbookInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedWorkbookInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedWorkbookInner.withTags(tags);
                } else if ("kind".equals(fieldName)) {
                    deserializedWorkbookInner.kind = SharedTypeKind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedWorkbookInner.innerProperties = WorkbookProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkbookInner;
        });
    }
}
