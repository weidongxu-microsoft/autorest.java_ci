// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.operationalinsights.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Workspace data table definition. */
@Fluent
public final class TableInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TableInner.class);

    /*
     * Table properties.
     */
    @JsonProperty(value = "properties")
    private TableProperties innerProperties;

    /**
     * Get the innerProperties property: Table properties.
     *
     * @return the innerProperties value.
     */
    private TableProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the retentionInDays property: The data table data retention in days, between 7 and 730. Setting this property
     * to null will default to the workspace retention.
     *
     * @return the retentionInDays value.
     */
    public Integer retentionInDays() {
        return this.innerProperties() == null ? null : this.innerProperties().retentionInDays();
    }

    /**
     * Set the retentionInDays property: The data table data retention in days, between 7 and 730. Setting this property
     * to null will default to the workspace retention.
     *
     * @param retentionInDays the retentionInDays value to set.
     * @return the TableInner object itself.
     */
    public TableInner withRetentionInDays(Integer retentionInDays) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableProperties();
        }
        this.innerProperties().withRetentionInDays(retentionInDays);
        return this;
    }

    /**
     * Get the isTroubleshootingAllowed property: Specifies if IsTroubleshootingEnabled property can be set for this
     * table.
     *
     * @return the isTroubleshootingAllowed value.
     */
    public Boolean isTroubleshootingAllowed() {
        return this.innerProperties() == null ? null : this.innerProperties().isTroubleshootingAllowed();
    }

    /**
     * Get the isTroubleshootEnabled property: Enable or disable troubleshoot for this table.
     *
     * @return the isTroubleshootEnabled value.
     */
    public Boolean isTroubleshootEnabled() {
        return this.innerProperties() == null ? null : this.innerProperties().isTroubleshootEnabled();
    }

    /**
     * Set the isTroubleshootEnabled property: Enable or disable troubleshoot for this table.
     *
     * @param isTroubleshootEnabled the isTroubleshootEnabled value to set.
     * @return the TableInner object itself.
     */
    public TableInner withIsTroubleshootEnabled(Boolean isTroubleshootEnabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new TableProperties();
        }
        this.innerProperties().withIsTroubleshootEnabled(isTroubleshootEnabled);
        return this;
    }

    /**
     * Get the lastTroubleshootDate property: Last time when troubleshooting was set for this table.
     *
     * @return the lastTroubleshootDate value.
     */
    public String lastTroubleshootDate() {
        return this.innerProperties() == null ? null : this.innerProperties().lastTroubleshootDate();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
