// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkVirtualApplianceConnectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.NetworkVirtualApplianceConnectionInner;
import com.azure.resourcemanager.network.generated.models.NetworkVirtualApplianceConnection;
import com.azure.resourcemanager.network.generated.models.NetworkVirtualApplianceConnections;

public final class NetworkVirtualApplianceConnectionsImpl implements NetworkVirtualApplianceConnections {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkVirtualApplianceConnectionsImpl.class);

    private final NetworkVirtualApplianceConnectionsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NetworkVirtualApplianceConnectionsImpl(NetworkVirtualApplianceConnectionsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public NetworkVirtualApplianceConnection createOrUpdate(String resourceGroupName,
        String networkVirtualApplianceName, String connectionName,
        NetworkVirtualApplianceConnectionInner networkVirtualApplianceConnectionParameters) {
        NetworkVirtualApplianceConnectionInner inner = this.serviceClient().createOrUpdate(resourceGroupName,
            networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters);
        if (inner != null) {
            return new NetworkVirtualApplianceConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public NetworkVirtualApplianceConnection createOrUpdate(String resourceGroupName,
        String networkVirtualApplianceName, String connectionName,
        NetworkVirtualApplianceConnectionInner networkVirtualApplianceConnectionParameters, Context context) {
        NetworkVirtualApplianceConnectionInner inner = this.serviceClient().createOrUpdate(resourceGroupName,
            networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters, context);
        if (inner != null) {
            return new NetworkVirtualApplianceConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkVirtualApplianceConnection> getWithResponse(String resourceGroupName,
        String networkVirtualApplianceName, String connectionName, Context context) {
        Response<NetworkVirtualApplianceConnectionInner> inner = this.serviceClient().getWithResponse(resourceGroupName,
            networkVirtualApplianceName, connectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NetworkVirtualApplianceConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkVirtualApplianceConnection get(String resourceGroupName, String networkVirtualApplianceName,
        String connectionName) {
        NetworkVirtualApplianceConnectionInner inner
            = this.serviceClient().get(resourceGroupName, networkVirtualApplianceName, connectionName);
        if (inner != null) {
            return new NetworkVirtualApplianceConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkVirtualApplianceName, String connectionName) {
        this.serviceClient().delete(resourceGroupName, networkVirtualApplianceName, connectionName);
    }

    public void delete(String resourceGroupName, String networkVirtualApplianceName, String connectionName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, networkVirtualApplianceName, connectionName, context);
    }

    public PagedIterable<NetworkVirtualApplianceConnection> list(String resourceGroupName,
        String networkVirtualApplianceName) {
        PagedIterable<NetworkVirtualApplianceConnectionInner> inner
            = this.serviceClient().list(resourceGroupName, networkVirtualApplianceName);
        return Utils.mapPage(inner, inner1 -> new NetworkVirtualApplianceConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkVirtualApplianceConnection> list(String resourceGroupName,
        String networkVirtualApplianceName, Context context) {
        PagedIterable<NetworkVirtualApplianceConnectionInner> inner
            = this.serviceClient().list(resourceGroupName, networkVirtualApplianceName, context);
        return Utils.mapPage(inner, inner1 -> new NetworkVirtualApplianceConnectionImpl(inner1, this.manager()));
    }

    private NetworkVirtualApplianceConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }
}
