// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.ConfigurationPolicyGroupsClient;
import com.azure.resourcemanager.network.generated.fluent.models.VpnServerConfigurationPolicyGroupInner;
import com.azure.resourcemanager.network.generated.models.ConfigurationPolicyGroups;
import com.azure.resourcemanager.network.generated.models.VpnServerConfigurationPolicyGroup;

public final class ConfigurationPolicyGroupsImpl implements ConfigurationPolicyGroups {
    private static final ClientLogger LOGGER = new ClientLogger(ConfigurationPolicyGroupsImpl.class);

    private final ConfigurationPolicyGroupsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public ConfigurationPolicyGroupsImpl(
        ConfigurationPolicyGroupsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(
        String resourceGroupName, String vpnServerConfigurationName, String configurationPolicyGroupName) {
        this.serviceClient().delete(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName);
    }

    public void delete(
        String resourceGroupName,
        String vpnServerConfigurationName,
        String configurationPolicyGroupName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, context);
    }

    public VpnServerConfigurationPolicyGroup get(
        String resourceGroupName, String vpnServerConfigurationName, String configurationPolicyGroupName) {
        VpnServerConfigurationPolicyGroupInner inner =
            this.serviceClient().get(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName);
        if (inner != null) {
            return new VpnServerConfigurationPolicyGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VpnServerConfigurationPolicyGroup> getWithResponse(
        String resourceGroupName,
        String vpnServerConfigurationName,
        String configurationPolicyGroupName,
        Context context) {
        Response<VpnServerConfigurationPolicyGroupInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VpnServerConfigurationPolicyGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<VpnServerConfigurationPolicyGroup> listByVpnServerConfiguration(
        String resourceGroupName, String vpnServerConfigurationName) {
        PagedIterable<VpnServerConfigurationPolicyGroupInner> inner =
            this.serviceClient().listByVpnServerConfiguration(resourceGroupName, vpnServerConfigurationName);
        return Utils.mapPage(inner, inner1 -> new VpnServerConfigurationPolicyGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<VpnServerConfigurationPolicyGroup> listByVpnServerConfiguration(
        String resourceGroupName, String vpnServerConfigurationName, Context context) {
        PagedIterable<VpnServerConfigurationPolicyGroupInner> inner =
            this.serviceClient().listByVpnServerConfiguration(resourceGroupName, vpnServerConfigurationName, context);
        return Utils.mapPage(inner, inner1 -> new VpnServerConfigurationPolicyGroupImpl(inner1, this.manager()));
    }

    public VpnServerConfigurationPolicyGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vpnServerConfigurationName = Utils.getValueFromIdByName(id, "vpnServerConfigurations");
        if (vpnServerConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vpnServerConfigurations'.",
                                id)));
        }
        String configurationPolicyGroupName = Utils.getValueFromIdByName(id, "configurationPolicyGroups");
        if (configurationPolicyGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationPolicyGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, Context.NONE)
            .getValue();
    }

    public Response<VpnServerConfigurationPolicyGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vpnServerConfigurationName = Utils.getValueFromIdByName(id, "vpnServerConfigurations");
        if (vpnServerConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vpnServerConfigurations'.",
                                id)));
        }
        String configurationPolicyGroupName = Utils.getValueFromIdByName(id, "configurationPolicyGroups");
        if (configurationPolicyGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationPolicyGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vpnServerConfigurationName = Utils.getValueFromIdByName(id, "vpnServerConfigurations");
        if (vpnServerConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vpnServerConfigurations'.",
                                id)));
        }
        String configurationPolicyGroupName = Utils.getValueFromIdByName(id, "configurationPolicyGroups");
        if (configurationPolicyGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationPolicyGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vpnServerConfigurationName = Utils.getValueFromIdByName(id, "vpnServerConfigurations");
        if (vpnServerConfigurationName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'vpnServerConfigurations'.",
                                id)));
        }
        String configurationPolicyGroupName = Utils.getValueFromIdByName(id, "configurationPolicyGroups");
        if (configurationPolicyGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'configurationPolicyGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, context);
    }

    private ConfigurationPolicyGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public VpnServerConfigurationPolicyGroupImpl define(String name) {
        return new VpnServerConfigurationPolicyGroupImpl(name, this.manager());
    }
}
