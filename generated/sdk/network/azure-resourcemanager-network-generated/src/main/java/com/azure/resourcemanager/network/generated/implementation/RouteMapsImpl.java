// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.RouteMapsClient;
import com.azure.resourcemanager.network.generated.fluent.models.RouteMapInner;
import com.azure.resourcemanager.network.generated.models.RouteMap;
import com.azure.resourcemanager.network.generated.models.RouteMaps;

public final class RouteMapsImpl implements RouteMaps {
    private static final ClientLogger LOGGER = new ClientLogger(RouteMapsImpl.class);

    private final RouteMapsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public RouteMapsImpl(
        RouteMapsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<RouteMap> getWithResponse(
        String resourceGroupName, String virtualHubName, String routeMapName, Context context) {
        Response<RouteMapInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, virtualHubName, routeMapName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RouteMapImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RouteMap get(String resourceGroupName, String virtualHubName, String routeMapName) {
        RouteMapInner inner = this.serviceClient().get(resourceGroupName, virtualHubName, routeMapName);
        if (inner != null) {
            return new RouteMapImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualHubName, String routeMapName) {
        this.serviceClient().delete(resourceGroupName, virtualHubName, routeMapName);
    }

    public void delete(String resourceGroupName, String virtualHubName, String routeMapName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualHubName, routeMapName, context);
    }

    public PagedIterable<RouteMap> list(String resourceGroupName, String virtualHubName) {
        PagedIterable<RouteMapInner> inner = this.serviceClient().list(resourceGroupName, virtualHubName);
        return Utils.mapPage(inner, inner1 -> new RouteMapImpl(inner1, this.manager()));
    }

    public PagedIterable<RouteMap> list(String resourceGroupName, String virtualHubName, Context context) {
        PagedIterable<RouteMapInner> inner = this.serviceClient().list(resourceGroupName, virtualHubName, context);
        return Utils.mapPage(inner, inner1 -> new RouteMapImpl(inner1, this.manager()));
    }

    public RouteMap getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        if (virtualHubName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHubs'.", id)));
        }
        String routeMapName = Utils.getValueFromIdByName(id, "routeMaps");
        if (routeMapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routeMaps'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualHubName, routeMapName, Context.NONE).getValue();
    }

    public Response<RouteMap> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        if (virtualHubName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHubs'.", id)));
        }
        String routeMapName = Utils.getValueFromIdByName(id, "routeMaps");
        if (routeMapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routeMaps'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualHubName, routeMapName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        if (virtualHubName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHubs'.", id)));
        }
        String routeMapName = Utils.getValueFromIdByName(id, "routeMaps");
        if (routeMapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routeMaps'.", id)));
        }
        this.delete(resourceGroupName, virtualHubName, routeMapName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHubName = Utils.getValueFromIdByName(id, "virtualHubs");
        if (virtualHubName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHubs'.", id)));
        }
        String routeMapName = Utils.getValueFromIdByName(id, "routeMaps");
        if (routeMapName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'routeMaps'.", id)));
        }
        this.delete(resourceGroupName, virtualHubName, routeMapName, context);
    }

    private RouteMapsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public RouteMapImpl define(String name) {
        return new RouteMapImpl(name, this.manager());
    }
}
