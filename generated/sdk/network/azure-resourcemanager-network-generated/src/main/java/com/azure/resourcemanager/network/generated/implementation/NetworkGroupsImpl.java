// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.NetworkGroupsClient;
import com.azure.resourcemanager.network.generated.fluent.models.NetworkGroupInner;
import com.azure.resourcemanager.network.generated.models.NetworkGroup;
import com.azure.resourcemanager.network.generated.models.NetworkGroups;

public final class NetworkGroupsImpl implements NetworkGroups {
    private static final ClientLogger LOGGER = new ClientLogger(NetworkGroupsImpl.class);

    private final NetworkGroupsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public NetworkGroupsImpl(
        NetworkGroupsClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NetworkGroup> getWithResponse(
        String resourceGroupName, String networkManagerName, String networkGroupName, Context context) {
        Response<NetworkGroupInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, networkManagerName, networkGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkGroup get(String resourceGroupName, String networkManagerName, String networkGroupName) {
        NetworkGroupInner inner = this.serviceClient().get(resourceGroupName, networkManagerName, networkGroupName);
        if (inner != null) {
            return new NetworkGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkManagerName, String networkGroupName) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, networkGroupName);
    }

    public void delete(
        String resourceGroupName, String networkManagerName, String networkGroupName, Boolean force, Context context) {
        this.serviceClient().delete(resourceGroupName, networkManagerName, networkGroupName, force, context);
    }

    public PagedIterable<NetworkGroup> list(String resourceGroupName, String networkManagerName) {
        PagedIterable<NetworkGroupInner> inner = this.serviceClient().list(resourceGroupName, networkManagerName);
        return Utils.mapPage(inner, inner1 -> new NetworkGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<NetworkGroup> list(
        String resourceGroupName, String networkManagerName, Integer top, String skipToken, Context context) {
        PagedIterable<NetworkGroupInner> inner =
            this.serviceClient().list(resourceGroupName, networkManagerName, top, skipToken, context);
        return Utils.mapPage(inner, inner1 -> new NetworkGroupImpl(inner1, this.manager()));
    }

    public NetworkGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String networkGroupName = Utils.getValueFromIdByName(id, "networkGroups");
        if (networkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, networkGroupName, Context.NONE).getValue();
    }

    public Response<NetworkGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String networkGroupName = Utils.getValueFromIdByName(id, "networkGroups");
        if (networkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkGroups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkManagerName, networkGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String networkGroupName = Utils.getValueFromIdByName(id, "networkGroups");
        if (networkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkGroups'.", id)));
        }
        Boolean localForce = null;
        this.delete(resourceGroupName, networkManagerName, networkGroupName, localForce, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Boolean force, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkManagerName = Utils.getValueFromIdByName(id, "networkManagers");
        if (networkManagerName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkManagers'.", id)));
        }
        String networkGroupName = Utils.getValueFromIdByName(id, "networkGroups");
        if (networkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'networkGroups'.", id)));
        }
        this.delete(resourceGroupName, networkManagerName, networkGroupName, force, context);
    }

    private NetworkGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public NetworkGroupImpl define(String name) {
        return new NetworkGroupImpl(name, this.manager());
    }
}
