// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storage.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storage.generated.fluent.StorageTaskAssignmentsClient;
import com.azure.resourcemanager.storage.generated.fluent.models.StorageTaskAssignmentInner;
import com.azure.resourcemanager.storage.generated.models.StorageTaskAssignment;
import com.azure.resourcemanager.storage.generated.models.StorageTaskAssignments;

public final class StorageTaskAssignmentsImpl implements StorageTaskAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskAssignmentsImpl.class);

    private final StorageTaskAssignmentsClient innerClient;

    private final com.azure.resourcemanager.storage.generated.StorageManager serviceManager;

    public StorageTaskAssignmentsImpl(StorageTaskAssignmentsClient innerClient,
        com.azure.resourcemanager.storage.generated.StorageManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StorageTaskAssignment> getWithResponse(String resourceGroupName, String accountName,
        String storageTaskAssignmentName, Context context) {
        Response<StorageTaskAssignmentInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, storageTaskAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StorageTaskAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageTaskAssignment get(String resourceGroupName, String accountName, String storageTaskAssignmentName) {
        StorageTaskAssignmentInner inner
            = this.serviceClient().get(resourceGroupName, accountName, storageTaskAssignmentName);
        if (inner != null) {
            return new StorageTaskAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String storageTaskAssignmentName) {
        this.serviceClient().delete(resourceGroupName, accountName, storageTaskAssignmentName);
    }

    public void delete(String resourceGroupName, String accountName, String storageTaskAssignmentName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, storageTaskAssignmentName, context);
    }

    public PagedIterable<StorageTaskAssignment> list(String resourceGroupName, String accountName) {
        PagedIterable<StorageTaskAssignmentInner> inner = this.serviceClient().list(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageTaskAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageTaskAssignment> list(String resourceGroupName, String accountName, Integer maxpagesize,
        Context context) {
        PagedIterable<StorageTaskAssignmentInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, maxpagesize, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StorageTaskAssignmentImpl(inner1, this.manager()));
    }

    public StorageTaskAssignment getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String storageTaskAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "storageTaskAssignments");
        if (storageTaskAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageTaskAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, storageTaskAssignmentName, Context.NONE).getValue();
    }

    public Response<StorageTaskAssignment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String storageTaskAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "storageTaskAssignments");
        if (storageTaskAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageTaskAssignments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, storageTaskAssignmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String storageTaskAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "storageTaskAssignments");
        if (storageTaskAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageTaskAssignments'.", id)));
        }
        this.delete(resourceGroupName, accountName, storageTaskAssignmentName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "storageAccounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storageAccounts'.", id)));
        }
        String storageTaskAssignmentName = ResourceManagerUtils.getValueFromIdByName(id, "storageTaskAssignments");
        if (storageTaskAssignmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'storageTaskAssignments'.", id)));
        }
        this.delete(resourceGroupName, accountName, storageTaskAssignmentName, context);
    }

    private StorageTaskAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storage.generated.StorageManager manager() {
        return this.serviceManager;
    }

    public StorageTaskAssignmentImpl define(String name) {
        return new StorageTaskAssignmentImpl(name, this.manager());
    }
}
