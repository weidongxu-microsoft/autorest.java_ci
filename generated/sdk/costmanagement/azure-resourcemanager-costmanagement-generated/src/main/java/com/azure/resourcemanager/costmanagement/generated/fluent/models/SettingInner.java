// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.costmanagement.generated.models.CacheItem;
import com.azure.resourcemanager.costmanagement.generated.models.ProxySettingResource;
import com.azure.resourcemanager.costmanagement.generated.models.SettingsPropertiesStartOn;
import java.io.IOException;
import java.util.List;

/**
 * State of the myscope setting.
 */
@Fluent
public final class SettingInner extends ProxySettingResource {
    /*
     * The properties of the setting.
     */
    private SettingsProperties innerProperties;

    /*
     * Resource kind.
     */
    private String kind;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of SettingInner class.
     */
    public SettingInner() {
    }

    /**
     * Get the innerProperties property: The properties of the setting.
     * 
     * @return the innerProperties value.
     */
    private SettingsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: Resource kind.
     * 
     * @return the kind value.
     */
    @Override
    public String kind() {
        return this.kind;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the scope property: Sets the default scope the current user will see when they sign into Azure Cost
     * Management in the Azure portal.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.innerProperties() == null ? null : this.innerProperties().scope();
    }

    /**
     * Set the scope property: Sets the default scope the current user will see when they sign into Azure Cost
     * Management in the Azure portal.
     * 
     * @param scope the scope value to set.
     * @return the SettingInner object itself.
     */
    public SettingInner withScope(String scope) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SettingsProperties();
        }
        this.innerProperties().withScope(scope);
        return this;
    }

    /**
     * Get the startOn property: Indicates what scope Cost Management in the Azure portal should default to. Allowed
     * values: LastUsed.
     * 
     * @return the startOn value.
     */
    public SettingsPropertiesStartOn startOn() {
        return this.innerProperties() == null ? null : this.innerProperties().startOn();
    }

    /**
     * Set the startOn property: Indicates what scope Cost Management in the Azure portal should default to. Allowed
     * values: LastUsed.
     * 
     * @param startOn the startOn value to set.
     * @return the SettingInner object itself.
     */
    public SettingInner withStartOn(SettingsPropertiesStartOn startOn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SettingsProperties();
        }
        this.innerProperties().withStartOn(startOn);
        return this;
    }

    /**
     * Get the cache property: Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     * @return the cache value.
     */
    public List<CacheItem> cache() {
        return this.innerProperties() == null ? null : this.innerProperties().cache();
    }

    /**
     * Set the cache property: Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     * @param cache the cache value to set.
     * @return the SettingInner object itself.
     */
    public SettingInner withCache(List<CacheItem> cache) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SettingsProperties();
        }
        this.innerProperties().withCache(cache);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SettingInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SettingInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SettingInner.
     */
    public static SettingInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SettingInner deserializedSettingInner = new SettingInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSettingInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSettingInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSettingInner.type = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedSettingInner.kind = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedSettingInner.innerProperties = SettingsProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSettingInner;
        });
    }
}
