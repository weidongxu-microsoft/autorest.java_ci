// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.costmanagement.generated.models.CacheItem;
import com.azure.resourcemanager.costmanagement.generated.models.SettingsPropertiesStartOn;
import java.io.IOException;
import java.util.List;

/**
 * The properties of the setting.
 */
@Fluent
public final class SettingsProperties implements JsonSerializable<SettingsProperties> {
    /*
     * Sets the default scope the current user will see when they sign into Azure Cost Management in the Azure portal.
     */
    private String scope;

    /*
     * Indicates what scope Cost Management in the Azure portal should default to. Allowed values: LastUsed.
     */
    private SettingsPropertiesStartOn startOn;

    /*
     * Array of scopes with additional details used by Cost Management in the Azure portal.
     */
    private List<CacheItem> cache;

    /**
     * Creates an instance of SettingsProperties class.
     */
    public SettingsProperties() {
    }

    /**
     * Get the scope property: Sets the default scope the current user will see when they sign into Azure Cost
     * Management in the Azure portal.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Sets the default scope the current user will see when they sign into Azure Cost
     * Management in the Azure portal.
     * 
     * @param scope the scope value to set.
     * @return the SettingsProperties object itself.
     */
    public SettingsProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the startOn property: Indicates what scope Cost Management in the Azure portal should default to. Allowed
     * values: LastUsed.
     * 
     * @return the startOn value.
     */
    public SettingsPropertiesStartOn startOn() {
        return this.startOn;
    }

    /**
     * Set the startOn property: Indicates what scope Cost Management in the Azure portal should default to. Allowed
     * values: LastUsed.
     * 
     * @param startOn the startOn value to set.
     * @return the SettingsProperties object itself.
     */
    public SettingsProperties withStartOn(SettingsPropertiesStartOn startOn) {
        this.startOn = startOn;
        return this;
    }

    /**
     * Get the cache property: Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     * @return the cache value.
     */
    public List<CacheItem> cache() {
        return this.cache;
    }

    /**
     * Set the cache property: Array of scopes with additional details used by Cost Management in the Azure portal.
     * 
     * @param cache the cache value to set.
     * @return the SettingsProperties object itself.
     */
    public SettingsProperties withCache(List<CacheItem> cache) {
        this.cache = cache;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scope() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property scope in model SettingsProperties"));
        }
        if (cache() != null) {
            cache().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SettingsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("startOn", this.startOn == null ? null : this.startOn.toString());
        jsonWriter.writeArrayField("cache", this.cache, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SettingsProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SettingsProperties.
     */
    public static SettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SettingsProperties deserializedSettingsProperties = new SettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedSettingsProperties.scope = reader.getString();
                } else if ("startOn".equals(fieldName)) {
                    deserializedSettingsProperties.startOn = SettingsPropertiesStartOn.fromString(reader.getString());
                } else if ("cache".equals(fieldName)) {
                    List<CacheItem> cache = reader.readArray(reader1 -> CacheItem.fromJson(reader1));
                    deserializedSettingsProperties.cache = cache;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSettingsProperties;
        });
    }
}
