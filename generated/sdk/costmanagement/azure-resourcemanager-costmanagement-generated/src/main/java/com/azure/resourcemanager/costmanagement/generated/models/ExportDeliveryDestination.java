// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The destination information for the delivery of the export. To allow access to a storage account, you must register
 * the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per
 * subscription. When creating an export in the Azure portal, it is done automatically, however API users need to
 * register the subscription. For more information see
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
 */
@Fluent
public final class ExportDeliveryDestination implements JsonSerializable<ExportDeliveryDestination> {
    /*
     * The resource id of the storage account where exports will be delivered.
     */
    private String resourceId;

    /*
     * The name of the container where exports will be uploaded.
     */
    private String container;

    /*
     * The name of the directory where exports will be uploaded.
     */
    private String rootFolderPath;

    /**
     * Creates an instance of ExportDeliveryDestination class.
     */
    public ExportDeliveryDestination() {
    }

    /**
     * Get the resourceId property: The resource id of the storage account where exports will be delivered.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource id of the storage account where exports will be delivered.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ExportDeliveryDestination object itself.
     */
    public ExportDeliveryDestination withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the container property: The name of the container where exports will be uploaded.
     * 
     * @return the container value.
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container property: The name of the container where exports will be uploaded.
     * 
     * @param container the container value to set.
     * @return the ExportDeliveryDestination object itself.
     */
    public ExportDeliveryDestination withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the rootFolderPath property: The name of the directory where exports will be uploaded.
     * 
     * @return the rootFolderPath value.
     */
    public String rootFolderPath() {
        return this.rootFolderPath;
    }

    /**
     * Set the rootFolderPath property: The name of the directory where exports will be uploaded.
     * 
     * @param rootFolderPath the rootFolderPath value to set.
     * @return the ExportDeliveryDestination object itself.
     */
    public ExportDeliveryDestination withRootFolderPath(String rootFolderPath) {
        this.rootFolderPath = rootFolderPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ExportDeliveryDestination"));
        }
        if (container() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property container in model ExportDeliveryDestination"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportDeliveryDestination.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("container", this.container);
        jsonWriter.writeStringField("rootFolderPath", this.rootFolderPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportDeliveryDestination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportDeliveryDestination if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportDeliveryDestination.
     */
    public static ExportDeliveryDestination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportDeliveryDestination deserializedExportDeliveryDestination = new ExportDeliveryDestination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedExportDeliveryDestination.resourceId = reader.getString();
                } else if ("container".equals(fieldName)) {
                    deserializedExportDeliveryDestination.container = reader.getString();
                } else if ("rootFolderPath".equals(fieldName)) {
                    deserializedExportDeliveryDestination.rootFolderPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportDeliveryDestination;
        });
    }
}
