// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.costmanagement.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CacheItem model.
 */
@Fluent
public final class CacheItem implements JsonSerializable<CacheItem> {
    /*
     * Resource ID used by Resource Manager to uniquely identify the scope.
     */
    private String id;

    /*
     * Display name for the scope.
     */
    private String name;

    /*
     * Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
     */
    private String channel;

    /*
     * Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner, Indirect,
     * NotApplicable
     */
    private String subchannel;

    /*
     * Resource ID of the parent scope. For instance, subscription's resource ID for a resource group or a management
     * group resource ID for a subscription.
     */
    private String parent;

    /*
     * Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
     */
    private String status;

    /**
     * Creates an instance of CacheItem class.
     */
    public CacheItem() {
    }

    /**
     * Get the id property: Resource ID used by Resource Manager to uniquely identify the scope.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Resource ID used by Resource Manager to uniquely identify the scope.
     * 
     * @param id the id value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Display name for the scope.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Display name for the scope.
     * 
     * @param name the name value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the channel property: Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal,
     * Unknown.
     * 
     * @return the channel value.
     */
    public String channel() {
        return this.channel;
    }

    /**
     * Set the channel property: Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal,
     * Unknown.
     * 
     * @param channel the channel value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withChannel(String channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Get the subchannel property: Indicates the type of modern account. Allowed values include: Individual,
     * Enterprise, Partner, Indirect, NotApplicable.
     * 
     * @return the subchannel value.
     */
    public String subchannel() {
        return this.subchannel;
    }

    /**
     * Set the subchannel property: Indicates the type of modern account. Allowed values include: Individual,
     * Enterprise, Partner, Indirect, NotApplicable.
     * 
     * @param subchannel the subchannel value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withSubchannel(String subchannel) {
        this.subchannel = subchannel;
        return this;
    }

    /**
     * Get the parent property: Resource ID of the parent scope. For instance, subscription's resource ID for a resource
     * group or a management group resource ID for a subscription.
     * 
     * @return the parent value.
     */
    public String parent() {
        return this.parent;
    }

    /**
     * Set the parent property: Resource ID of the parent scope. For instance, subscription's resource ID for a resource
     * group or a management group resource ID for a subscription.
     * 
     * @param parent the parent value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withParent(String parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Get the status property: Indicates the status of the scope. Status only applies to subscriptions and billing
     * accounts.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Indicates the status of the scope. Status only applies to subscriptions and billing
     * accounts.
     * 
     * @param status the status value to set.
     * @return the CacheItem object itself.
     */
    public CacheItem withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property id in model CacheItem"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CacheItem"));
        }
        if (channel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property channel in model CacheItem"));
        }
        if (subchannel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subchannel in model CacheItem"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CacheItem.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("channel", this.channel);
        jsonWriter.writeStringField("subchannel", this.subchannel);
        jsonWriter.writeStringField("parent", this.parent);
        jsonWriter.writeStringField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CacheItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CacheItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CacheItem.
     */
    public static CacheItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CacheItem deserializedCacheItem = new CacheItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCacheItem.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCacheItem.name = reader.getString();
                } else if ("channel".equals(fieldName)) {
                    deserializedCacheItem.channel = reader.getString();
                } else if ("subchannel".equals(fieldName)) {
                    deserializedCacheItem.subchannel = reader.getString();
                } else if ("parent".equals(fieldName)) {
                    deserializedCacheItem.parent = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCacheItem.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCacheItem;
        });
    }
}
