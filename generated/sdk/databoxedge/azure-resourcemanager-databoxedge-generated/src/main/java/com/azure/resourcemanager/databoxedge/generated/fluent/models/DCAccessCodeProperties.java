// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DCAccessCode Properties.
 */
@Fluent
public final class DCAccessCodeProperties implements JsonSerializable<DCAccessCodeProperties> {
    /*
     * DCAccess Code for the Self Managed shipment.
     */
    private String authCode;

    /**
     * Creates an instance of DCAccessCodeProperties class.
     */
    public DCAccessCodeProperties() {
    }

    /**
     * Get the authCode property: DCAccess Code for the Self Managed shipment.
     * 
     * @return the authCode value.
     */
    public String authCode() {
        return this.authCode;
    }

    /**
     * Set the authCode property: DCAccess Code for the Self Managed shipment.
     * 
     * @param authCode the authCode value to set.
     * @return the DCAccessCodeProperties object itself.
     */
    public DCAccessCodeProperties withAuthCode(String authCode) {
        this.authCode = authCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authCode", this.authCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DCAccessCodeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DCAccessCodeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DCAccessCodeProperties.
     */
    public static DCAccessCodeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DCAccessCodeProperties deserializedDCAccessCodeProperties = new DCAccessCodeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authCode".equals(fieldName)) {
                    deserializedDCAccessCodeProperties.authCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDCAccessCodeProperties;
        });
    }
}
