// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.ArmBaseModel;
import com.azure.resourcemanager.databoxedge.generated.models.MetricConfiguration;
import java.io.IOException;
import java.util.List;

/**
 * The metric setting details for the role.
 */
@Fluent
public final class MonitoringMetricConfigurationInner extends ArmBaseModel {
    /*
     * The metric setting properties.
     */
    private MonitoringMetricConfigurationProperties innerProperties = new MonitoringMetricConfigurationProperties();

    /*
     * Metadata pertaining to creation and last modification of MonitoringConfiguration
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of MonitoringMetricConfigurationInner class.
     */
    public MonitoringMetricConfigurationInner() {
    }

    /**
     * Get the innerProperties property: The metric setting properties.
     * 
     * @return the innerProperties value.
     */
    private MonitoringMetricConfigurationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of MonitoringConfiguration.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the metricConfigurations property: The metrics configuration details.
     * 
     * @return the metricConfigurations value.
     */
    public List<MetricConfiguration> metricConfigurations() {
        return this.innerProperties() == null ? null : this.innerProperties().metricConfigurations();
    }

    /**
     * Set the metricConfigurations property: The metrics configuration details.
     * 
     * @param metricConfigurations the metricConfigurations value to set.
     * @return the MonitoringMetricConfigurationInner object itself.
     */
    public MonitoringMetricConfigurationInner withMetricConfigurations(List<MetricConfiguration> metricConfigurations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitoringMetricConfigurationProperties();
        }
        this.innerProperties().withMetricConfigurations(metricConfigurations);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model MonitoringMetricConfigurationInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitoringMetricConfigurationInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitoringMetricConfigurationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitoringMetricConfigurationInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitoringMetricConfigurationInner.
     */
    public static MonitoringMetricConfigurationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitoringMetricConfigurationInner deserializedMonitoringMetricConfigurationInner
                = new MonitoringMetricConfigurationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMonitoringMetricConfigurationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMonitoringMetricConfigurationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMonitoringMetricConfigurationInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedMonitoringMetricConfigurationInner.innerProperties
                        = MonitoringMetricConfigurationProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMonitoringMetricConfigurationInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitoringMetricConfigurationInner;
        });
    }
}
