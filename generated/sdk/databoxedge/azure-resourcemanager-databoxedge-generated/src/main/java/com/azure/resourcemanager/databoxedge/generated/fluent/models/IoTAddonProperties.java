// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.AddonState;
import com.azure.resourcemanager.databoxedge.generated.models.HostPlatformType;
import com.azure.resourcemanager.databoxedge.generated.models.IoTDeviceInfo;
import com.azure.resourcemanager.databoxedge.generated.models.PlatformType;
import java.io.IOException;

/**
 * IoT addon properties.
 */
@Fluent
public final class IoTAddonProperties implements JsonSerializable<IoTAddonProperties> {
    /*
     * IoT device metadata to which appliance needs to be connected.
     */
    private IoTDeviceInfo ioTDeviceDetails;

    /*
     * IoT edge device to which the IoT Addon needs to be configured.
     */
    private IoTDeviceInfo ioTEdgeDeviceDetails;

    /*
     * Version of IoT running on the appliance.
     */
    private String version;

    /*
     * Host OS supported by the IoT addon.
     */
    private PlatformType hostPlatform;

    /*
     * Platform where the runtime is hosted.
     */
    private HostPlatformType hostPlatformType;

    /*
     * Addon Provisioning State
     */
    private AddonState provisioningState;

    /**
     * Creates an instance of IoTAddonProperties class.
     */
    public IoTAddonProperties() {
    }

    /**
     * Get the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     * 
     * @return the ioTDeviceDetails value.
     */
    public IoTDeviceInfo ioTDeviceDetails() {
        return this.ioTDeviceDetails;
    }

    /**
     * Set the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     * 
     * @param ioTDeviceDetails the ioTDeviceDetails value to set.
     * @return the IoTAddonProperties object itself.
     */
    public IoTAddonProperties withIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
        this.ioTDeviceDetails = ioTDeviceDetails;
        return this;
    }

    /**
     * Get the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     * 
     * @return the ioTEdgeDeviceDetails value.
     */
    public IoTDeviceInfo ioTEdgeDeviceDetails() {
        return this.ioTEdgeDeviceDetails;
    }

    /**
     * Set the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     * 
     * @param ioTEdgeDeviceDetails the ioTEdgeDeviceDetails value to set.
     * @return the IoTAddonProperties object itself.
     */
    public IoTAddonProperties withIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
        this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
        return this;
    }

    /**
     * Get the version property: Version of IoT running on the appliance.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the hostPlatform property: Host OS supported by the IoT addon.
     * 
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     * 
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the provisioningState property: Addon Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public AddonState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ioTDeviceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ioTDeviceDetails in model IoTAddonProperties"));
        } else {
            ioTDeviceDetails().validate();
        }
        if (ioTEdgeDeviceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ioTEdgeDeviceDetails in model IoTAddonProperties"));
        } else {
            ioTEdgeDeviceDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTAddonProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("ioTDeviceDetails", this.ioTDeviceDetails);
        jsonWriter.writeJsonField("ioTEdgeDeviceDetails", this.ioTEdgeDeviceDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTAddonProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTAddonProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IoTAddonProperties.
     */
    public static IoTAddonProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTAddonProperties deserializedIoTAddonProperties = new IoTAddonProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ioTDeviceDetails".equals(fieldName)) {
                    deserializedIoTAddonProperties.ioTDeviceDetails = IoTDeviceInfo.fromJson(reader);
                } else if ("ioTEdgeDeviceDetails".equals(fieldName)) {
                    deserializedIoTAddonProperties.ioTEdgeDeviceDetails = IoTDeviceInfo.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedIoTAddonProperties.version = reader.getString();
                } else if ("hostPlatform".equals(fieldName)) {
                    deserializedIoTAddonProperties.hostPlatform = PlatformType.fromString(reader.getString());
                } else if ("hostPlatformType".equals(fieldName)) {
                    deserializedIoTAddonProperties.hostPlatformType = HostPlatformType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedIoTAddonProperties.provisioningState = AddonState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTAddonProperties;
        });
    }
}
