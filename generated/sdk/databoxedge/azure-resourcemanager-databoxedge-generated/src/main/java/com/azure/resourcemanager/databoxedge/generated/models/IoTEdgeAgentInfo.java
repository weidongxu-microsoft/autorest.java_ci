// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role
 * if specified.
 */
@Fluent
public final class IoTEdgeAgentInfo implements JsonSerializable<IoTEdgeAgentInfo> {
    /*
     * Name of the IoT edge agent image.
     */
    private String imageName;

    /*
     * Image Tag.
     */
    private String tag;

    /*
     * Image repository details.
     */
    private ImageRepositoryCredential imageRepository;

    /**
     * Creates an instance of IoTEdgeAgentInfo class.
     */
    public IoTEdgeAgentInfo() {
    }

    /**
     * Get the imageName property: Name of the IoT edge agent image.
     * 
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Set the imageName property: Name of the IoT edge agent image.
     * 
     * @param imageName the imageName value to set.
     * @return the IoTEdgeAgentInfo object itself.
     */
    public IoTEdgeAgentInfo withImageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Get the tag property: Image Tag.
     * 
     * @return the tag value.
     */
    public String tag() {
        return this.tag;
    }

    /**
     * Set the tag property: Image Tag.
     * 
     * @param tag the tag value to set.
     * @return the IoTEdgeAgentInfo object itself.
     */
    public IoTEdgeAgentInfo withTag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get the imageRepository property: Image repository details.
     * 
     * @return the imageRepository value.
     */
    public ImageRepositoryCredential imageRepository() {
        return this.imageRepository;
    }

    /**
     * Set the imageRepository property: Image repository details.
     * 
     * @param imageRepository the imageRepository value to set.
     * @return the IoTEdgeAgentInfo object itself.
     */
    public IoTEdgeAgentInfo withImageRepository(ImageRepositoryCredential imageRepository) {
        this.imageRepository = imageRepository;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property imageName in model IoTEdgeAgentInfo"));
        }
        if (tag() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tag in model IoTEdgeAgentInfo"));
        }
        if (imageRepository() != null) {
            imageRepository().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTEdgeAgentInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageName", this.imageName);
        jsonWriter.writeStringField("tag", this.tag);
        jsonWriter.writeJsonField("imageRepository", this.imageRepository);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTEdgeAgentInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTEdgeAgentInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IoTEdgeAgentInfo.
     */
    public static IoTEdgeAgentInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTEdgeAgentInfo deserializedIoTEdgeAgentInfo = new IoTEdgeAgentInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageName".equals(fieldName)) {
                    deserializedIoTEdgeAgentInfo.imageName = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    deserializedIoTEdgeAgentInfo.tag = reader.getString();
                } else if ("imageRepository".equals(fieldName)) {
                    deserializedIoTEdgeAgentInfo.imageRepository = ImageRepositoryCredential.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTEdgeAgentInfo;
        });
    }
}
