// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.AsymmetricEncryptedSecret;
import com.azure.resourcemanager.databoxedge.generated.models.RoleStatus;
import java.io.IOException;

/**
 * MEC role properties.
 */
@Fluent
public final class MecRoleProperties implements JsonSerializable<MecRoleProperties> {
    /*
     * Activation key of the MEC.
     */
    private AsymmetricEncryptedSecret connectionString;

    /*
     * Controller Endpoint.
     */
    private String controllerEndpoint;

    /*
     * Unique Id of the Resource.
     */
    private String resourceUniqueId;

    /*
     * Role status.
     */
    private RoleStatus roleStatus;

    /**
     * Creates an instance of MecRoleProperties class.
     */
    public MecRoleProperties() {
    }

    /**
     * Get the connectionString property: Activation key of the MEC.
     * 
     * @return the connectionString value.
     */
    public AsymmetricEncryptedSecret connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Activation key of the MEC.
     * 
     * @param connectionString the connectionString value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withConnectionString(AsymmetricEncryptedSecret connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the controllerEndpoint property: Controller Endpoint.
     * 
     * @return the controllerEndpoint value.
     */
    public String controllerEndpoint() {
        return this.controllerEndpoint;
    }

    /**
     * Set the controllerEndpoint property: Controller Endpoint.
     * 
     * @param controllerEndpoint the controllerEndpoint value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withControllerEndpoint(String controllerEndpoint) {
        this.controllerEndpoint = controllerEndpoint;
        return this;
    }

    /**
     * Get the resourceUniqueId property: Unique Id of the Resource.
     * 
     * @return the resourceUniqueId value.
     */
    public String resourceUniqueId() {
        return this.resourceUniqueId;
    }

    /**
     * Set the resourceUniqueId property: Unique Id of the Resource.
     * 
     * @param resourceUniqueId the resourceUniqueId value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withResourceUniqueId(String resourceUniqueId) {
        this.resourceUniqueId = resourceUniqueId;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     * 
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     * 
     * @param roleStatus the roleStatus value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionString() != null) {
            connectionString().validate();
        }
        if (roleStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property roleStatus in model MecRoleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MecRoleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("roleStatus", this.roleStatus == null ? null : this.roleStatus.toString());
        jsonWriter.writeJsonField("connectionString", this.connectionString);
        jsonWriter.writeStringField("controllerEndpoint", this.controllerEndpoint);
        jsonWriter.writeStringField("resourceUniqueId", this.resourceUniqueId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MecRoleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MecRoleProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MecRoleProperties.
     */
    public static MecRoleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MecRoleProperties deserializedMecRoleProperties = new MecRoleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("roleStatus".equals(fieldName)) {
                    deserializedMecRoleProperties.roleStatus = RoleStatus.fromString(reader.getString());
                } else if ("connectionString".equals(fieldName)) {
                    deserializedMecRoleProperties.connectionString = AsymmetricEncryptedSecret.fromJson(reader);
                } else if ("controllerEndpoint".equals(fieldName)) {
                    deserializedMecRoleProperties.controllerEndpoint = reader.getString();
                } else if ("resourceUniqueId".equals(fieldName)) {
                    deserializedMecRoleProperties.resourceUniqueId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMecRoleProperties;
        });
    }
}
