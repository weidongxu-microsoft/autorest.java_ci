// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Image repository credential.
 */
@Fluent
public final class ImageRepositoryCredential implements JsonSerializable<ImageRepositoryCredential> {
    /*
     * Image repository url (e.g.: mcr.microsoft.com).
     */
    private String imageRepositoryUrl;

    /*
     * Repository user name.
     */
    private String username;

    /*
     * Repository user password.
     */
    private AsymmetricEncryptedSecret password;

    /**
     * Creates an instance of ImageRepositoryCredential class.
     */
    public ImageRepositoryCredential() {
    }

    /**
     * Get the imageRepositoryUrl property: Image repository url (e.g.: mcr.microsoft.com).
     * 
     * @return the imageRepositoryUrl value.
     */
    public String imageRepositoryUrl() {
        return this.imageRepositoryUrl;
    }

    /**
     * Set the imageRepositoryUrl property: Image repository url (e.g.: mcr.microsoft.com).
     * 
     * @param imageRepositoryUrl the imageRepositoryUrl value to set.
     * @return the ImageRepositoryCredential object itself.
     */
    public ImageRepositoryCredential withImageRepositoryUrl(String imageRepositoryUrl) {
        this.imageRepositoryUrl = imageRepositoryUrl;
        return this;
    }

    /**
     * Get the username property: Repository user name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Repository user name.
     * 
     * @param username the username value to set.
     * @return the ImageRepositoryCredential object itself.
     */
    public ImageRepositoryCredential withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Repository user password.
     * 
     * @return the password value.
     */
    public AsymmetricEncryptedSecret password() {
        return this.password;
    }

    /**
     * Set the password property: Repository user password.
     * 
     * @param password the password value to set.
     * @return the ImageRepositoryCredential object itself.
     */
    public ImageRepositoryCredential withPassword(AsymmetricEncryptedSecret password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageRepositoryUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageRepositoryUrl in model ImageRepositoryCredential"));
        }
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property username in model ImageRepositoryCredential"));
        }
        if (password() != null) {
            password().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ImageRepositoryCredential.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageRepositoryUrl", this.imageRepositoryUrl);
        jsonWriter.writeStringField("userName", this.username);
        jsonWriter.writeJsonField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageRepositoryCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageRepositoryCredential if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageRepositoryCredential.
     */
    public static ImageRepositoryCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageRepositoryCredential deserializedImageRepositoryCredential = new ImageRepositoryCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageRepositoryUrl".equals(fieldName)) {
                    deserializedImageRepositoryCredential.imageRepositoryUrl = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    deserializedImageRepositoryCredential.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedImageRepositoryCredential.password = AsymmetricEncryptedSecret.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageRepositoryCredential;
        });
    }
}
