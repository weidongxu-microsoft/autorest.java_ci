// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cni configuration.
 */
@Immutable
public final class CniConfig implements JsonSerializable<CniConfig> {
    /*
     * Cni type
     */
    private String type;

    /*
     * Cni version
     */
    private String version;

    /*
     * Pod Subnet
     */
    private String podSubnet;

    /*
     * Service subnet
     */
    private String serviceSubnet;

    /**
     * Creates an instance of CniConfig class.
     */
    public CniConfig() {
    }

    /**
     * Get the type property: Cni type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the version property: Cni version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the podSubnet property: Pod Subnet.
     * 
     * @return the podSubnet value.
     */
    public String podSubnet() {
        return this.podSubnet;
    }

    /**
     * Get the serviceSubnet property: Service subnet.
     * 
     * @return the serviceSubnet value.
     */
    public String serviceSubnet() {
        return this.serviceSubnet;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CniConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CniConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CniConfig.
     */
    public static CniConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CniConfig deserializedCniConfig = new CniConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedCniConfig.type = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedCniConfig.version = reader.getString();
                } else if ("podSubnet".equals(fieldName)) {
                    deserializedCniConfig.podSubnet = reader.getString();
                } else if ("serviceSubnet".equals(fieldName)) {
                    deserializedCniConfig.serviceSubnet = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCniConfig;
        });
    }
}
