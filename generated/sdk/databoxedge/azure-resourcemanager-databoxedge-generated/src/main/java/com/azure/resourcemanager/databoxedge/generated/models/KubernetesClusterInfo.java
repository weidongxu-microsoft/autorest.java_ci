// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Kubernetes cluster configuration.
 */
@Fluent
public final class KubernetesClusterInfo implements JsonSerializable<KubernetesClusterInfo> {
    /*
     * Etcd configuration
     */
    private EtcdInfo etcdInfo;

    /*
     * Kubernetes cluster nodes
     */
    private List<NodeInfo> nodes;

    /*
     * Kubernetes cluster version
     */
    private String version;

    /**
     * Creates an instance of KubernetesClusterInfo class.
     */
    public KubernetesClusterInfo() {
    }

    /**
     * Get the etcdInfo property: Etcd configuration.
     * 
     * @return the etcdInfo value.
     */
    public EtcdInfo etcdInfo() {
        return this.etcdInfo;
    }

    /**
     * Get the nodes property: Kubernetes cluster nodes.
     * 
     * @return the nodes value.
     */
    public List<NodeInfo> nodes() {
        return this.nodes;
    }

    /**
     * Get the version property: Kubernetes cluster version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Kubernetes cluster version.
     * 
     * @param version the version value to set.
     * @return the KubernetesClusterInfo object itself.
     */
    public KubernetesClusterInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (etcdInfo() != null) {
            etcdInfo().validate();
        }
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property version in model KubernetesClusterInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KubernetesClusterInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesClusterInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesClusterInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KubernetesClusterInfo.
     */
    public static KubernetesClusterInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesClusterInfo deserializedKubernetesClusterInfo = new KubernetesClusterInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedKubernetesClusterInfo.version = reader.getString();
                } else if ("etcdInfo".equals(fieldName)) {
                    deserializedKubernetesClusterInfo.etcdInfo = EtcdInfo.fromJson(reader);
                } else if ("nodes".equals(fieldName)) {
                    List<NodeInfo> nodes = reader.readArray(reader1 -> NodeInfo.fromJson(reader1));
                    deserializedKubernetesClusterInfo.nodes = nodes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesClusterInfo;
        });
    }
}
