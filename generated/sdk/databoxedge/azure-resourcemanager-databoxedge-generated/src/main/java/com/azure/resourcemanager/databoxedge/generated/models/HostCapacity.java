// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Host Capacity Data.
 */
@Fluent
public final class HostCapacity implements JsonSerializable<HostCapacity> {
    /*
     * The name of the host.
     */
    private String hostname;

    /*
     * The available memory on the host accounting for VM placement size and any host VM reservations.
     */
    private Long effectiveAvailableMemoryMbOnHost;

    /*
     * The available amount of GPUs on the host to use after accounting for GPUS used by reservations on the host.
     */
    private Integer availableGpuCount;

    /*
     * The VM used memory per VmId.
     */
    private Map<String, VmMemory> vmUsedMemory;

    /*
     * The GPU type of the VM.
     */
    private String gpuType;

    /*
     * The numa nodes information for Hpn VMs.
     */
    private List<NumaNodeData> numaNodesData;

    /**
     * Creates an instance of HostCapacity class.
     */
    public HostCapacity() {
    }

    /**
     * Get the hostname property: The name of the host.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The name of the host.
     * 
     * @param hostname the hostname value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the effectiveAvailableMemoryMbOnHost property: The available memory on the host accounting for VM placement
     * size and any host VM reservations.
     * 
     * @return the effectiveAvailableMemoryMbOnHost value.
     */
    public Long effectiveAvailableMemoryMbOnHost() {
        return this.effectiveAvailableMemoryMbOnHost;
    }

    /**
     * Set the effectiveAvailableMemoryMbOnHost property: The available memory on the host accounting for VM placement
     * size and any host VM reservations.
     * 
     * @param effectiveAvailableMemoryMbOnHost the effectiveAvailableMemoryMbOnHost value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withEffectiveAvailableMemoryMbOnHost(Long effectiveAvailableMemoryMbOnHost) {
        this.effectiveAvailableMemoryMbOnHost = effectiveAvailableMemoryMbOnHost;
        return this;
    }

    /**
     * Get the availableGpuCount property: The available amount of GPUs on the host to use after accounting for GPUS
     * used by reservations on the host.
     * 
     * @return the availableGpuCount value.
     */
    public Integer availableGpuCount() {
        return this.availableGpuCount;
    }

    /**
     * Set the availableGpuCount property: The available amount of GPUs on the host to use after accounting for GPUS
     * used by reservations on the host.
     * 
     * @param availableGpuCount the availableGpuCount value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withAvailableGpuCount(Integer availableGpuCount) {
        this.availableGpuCount = availableGpuCount;
        return this;
    }

    /**
     * Get the vmUsedMemory property: The VM used memory per VmId.
     * 
     * @return the vmUsedMemory value.
     */
    public Map<String, VmMemory> vmUsedMemory() {
        return this.vmUsedMemory;
    }

    /**
     * Set the vmUsedMemory property: The VM used memory per VmId.
     * 
     * @param vmUsedMemory the vmUsedMemory value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withVmUsedMemory(Map<String, VmMemory> vmUsedMemory) {
        this.vmUsedMemory = vmUsedMemory;
        return this;
    }

    /**
     * Get the gpuType property: The GPU type of the VM.
     * 
     * @return the gpuType value.
     */
    public String gpuType() {
        return this.gpuType;
    }

    /**
     * Set the gpuType property: The GPU type of the VM.
     * 
     * @param gpuType the gpuType value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withGpuType(String gpuType) {
        this.gpuType = gpuType;
        return this;
    }

    /**
     * Get the numaNodesData property: The numa nodes information for Hpn VMs.
     * 
     * @return the numaNodesData value.
     */
    public List<NumaNodeData> numaNodesData() {
        return this.numaNodesData;
    }

    /**
     * Set the numaNodesData property: The numa nodes information for Hpn VMs.
     * 
     * @param numaNodesData the numaNodesData value to set.
     * @return the HostCapacity object itself.
     */
    public HostCapacity withNumaNodesData(List<NumaNodeData> numaNodesData) {
        this.numaNodesData = numaNodesData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmUsedMemory() != null) {
            vmUsedMemory().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (numaNodesData() != null) {
            numaNodesData().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeNumberField("effectiveAvailableMemoryMbOnHost", this.effectiveAvailableMemoryMbOnHost);
        jsonWriter.writeNumberField("availableGpuCount", this.availableGpuCount);
        jsonWriter.writeMapField("vmUsedMemory", this.vmUsedMemory, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("gpuType", this.gpuType);
        jsonWriter.writeArrayField("numaNodesData", this.numaNodesData, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostCapacity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostCapacity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostCapacity.
     */
    public static HostCapacity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostCapacity deserializedHostCapacity = new HostCapacity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedHostCapacity.hostname = reader.getString();
                } else if ("effectiveAvailableMemoryMbOnHost".equals(fieldName)) {
                    deserializedHostCapacity.effectiveAvailableMemoryMbOnHost = reader.getNullable(JsonReader::getLong);
                } else if ("availableGpuCount".equals(fieldName)) {
                    deserializedHostCapacity.availableGpuCount = reader.getNullable(JsonReader::getInt);
                } else if ("vmUsedMemory".equals(fieldName)) {
                    Map<String, VmMemory> vmUsedMemory = reader.readMap(reader1 -> VmMemory.fromJson(reader1));
                    deserializedHostCapacity.vmUsedMemory = vmUsedMemory;
                } else if ("gpuType".equals(fieldName)) {
                    deserializedHostCapacity.gpuType = reader.getString();
                } else if ("numaNodesData".equals(fieldName)) {
                    List<NumaNodeData> numaNodesData = reader.readArray(reader1 -> NumaNodeData.fromJson(reader1));
                    deserializedHostCapacity.numaNodesData = numaNodesData;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostCapacity;
        });
    }
}
