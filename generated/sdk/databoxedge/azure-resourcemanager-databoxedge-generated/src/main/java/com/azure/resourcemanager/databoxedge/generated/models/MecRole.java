// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.MecRoleProperties;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.RoleInner;
import java.io.IOException;

/**
 * MEC role.
 */
@Fluent
public final class MecRole extends RoleInner {
    /*
     * Role type.
     */
    private RoleTypes kind = RoleTypes.MEC;

    /*
     * Properties specific to MEC role.
     */
    private MecRoleProperties innerProperties;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Metadata pertaining to creation and last modification of Role
     */
    private SystemData systemData;

    /**
     * Creates an instance of MecRole class.
     */
    public MecRole() {
    }

    /**
     * Get the kind property: Role type.
     * 
     * @return the kind value.
     */
    @Override
    public RoleTypes kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Properties specific to MEC role.
     * 
     * @return the innerProperties value.
     */
    private MecRoleProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of Role.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the connectionString property: Activation key of the MEC.
     * 
     * @return the connectionString value.
     */
    public AsymmetricEncryptedSecret connectionString() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionString();
    }

    /**
     * Set the connectionString property: Activation key of the MEC.
     * 
     * @param connectionString the connectionString value to set.
     * @return the MecRole object itself.
     */
    public MecRole withConnectionString(AsymmetricEncryptedSecret connectionString) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withConnectionString(connectionString);
        return this;
    }

    /**
     * Get the controllerEndpoint property: Controller Endpoint.
     * 
     * @return the controllerEndpoint value.
     */
    public String controllerEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().controllerEndpoint();
    }

    /**
     * Set the controllerEndpoint property: Controller Endpoint.
     * 
     * @param controllerEndpoint the controllerEndpoint value to set.
     * @return the MecRole object itself.
     */
    public MecRole withControllerEndpoint(String controllerEndpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withControllerEndpoint(controllerEndpoint);
        return this;
    }

    /**
     * Get the resourceUniqueId property: Unique Id of the Resource.
     * 
     * @return the resourceUniqueId value.
     */
    public String resourceUniqueId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceUniqueId();
    }

    /**
     * Set the resourceUniqueId property: Unique Id of the Resource.
     * 
     * @param resourceUniqueId the resourceUniqueId value to set.
     * @return the MecRole object itself.
     */
    public MecRole withResourceUniqueId(String resourceUniqueId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withResourceUniqueId(resourceUniqueId);
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     * 
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().roleStatus();
    }

    /**
     * Set the roleStatus property: Role status.
     * 
     * @param roleStatus the roleStatus value to set.
     * @return the MecRole object itself.
     */
    public MecRole withRoleStatus(RoleStatus roleStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withRoleStatus(roleStatus);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MecRole from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MecRole if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MecRole.
     */
    public static MecRole fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MecRole deserializedMecRole = new MecRole();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMecRole.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMecRole.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMecRole.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedMecRole.systemData = SystemData.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedMecRole.kind = RoleTypes.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedMecRole.innerProperties = MecRoleProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMecRole;
        });
    }
}
