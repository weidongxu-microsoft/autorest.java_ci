// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.ArmBaseModel;
import com.azure.resourcemanager.databoxedge.generated.models.ClusterCapacityViewData;
import com.azure.resourcemanager.databoxedge.generated.models.ClusterStorageViewData;
import com.azure.resourcemanager.databoxedge.generated.models.HostCapacity;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Object for Capturing DeviceCapacityInfo.
 */
@Fluent
public final class DeviceCapacityInfoInner extends ArmBaseModel {
    /*
     * The device capacity properties.
     */
    private DeviceCapacityInfoProperties innerProperties;

    /*
     * Metadata pertaining to device capacity info.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DeviceCapacityInfoInner class.
     */
    public DeviceCapacityInfoInner() {
    }

    /**
     * Get the innerProperties property: The device capacity properties.
     * 
     * @return the innerProperties value.
     */
    private DeviceCapacityInfoProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to device capacity info.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the timestamp property: Timestamp of request in UTC.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.innerProperties() == null ? null : this.innerProperties().timestamp();
    }

    /**
     * Set the timestamp property: Timestamp of request in UTC.
     * 
     * @param timestamp the timestamp value to set.
     * @return the DeviceCapacityInfoInner object itself.
     */
    public DeviceCapacityInfoInner withTimestamp(OffsetDateTime timestamp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityInfoProperties();
        }
        this.innerProperties().withTimestamp(timestamp);
        return this;
    }

    /**
     * Get the clusterStorageCapacityInfo property: Cluster capacity data for storage resources (CSV).
     * 
     * @return the clusterStorageCapacityInfo value.
     */
    public ClusterStorageViewData clusterStorageCapacityInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterStorageCapacityInfo();
    }

    /**
     * Set the clusterStorageCapacityInfo property: Cluster capacity data for storage resources (CSV).
     * 
     * @param clusterStorageCapacityInfo the clusterStorageCapacityInfo value to set.
     * @return the DeviceCapacityInfoInner object itself.
     */
    public DeviceCapacityInfoInner withClusterStorageCapacityInfo(ClusterStorageViewData clusterStorageCapacityInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityInfoProperties();
        }
        this.innerProperties().withClusterStorageCapacityInfo(clusterStorageCapacityInfo);
        return this;
    }

    /**
     * Get the clusterComputeCapacityInfo property: Cluster capacity data for compute resources (Memory and GPU).
     * 
     * @return the clusterComputeCapacityInfo value.
     */
    public ClusterCapacityViewData clusterComputeCapacityInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterComputeCapacityInfo();
    }

    /**
     * Set the clusterComputeCapacityInfo property: Cluster capacity data for compute resources (Memory and GPU).
     * 
     * @param clusterComputeCapacityInfo the clusterComputeCapacityInfo value to set.
     * @return the DeviceCapacityInfoInner object itself.
     */
    public DeviceCapacityInfoInner withClusterComputeCapacityInfo(ClusterCapacityViewData clusterComputeCapacityInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityInfoProperties();
        }
        this.innerProperties().withClusterComputeCapacityInfo(clusterComputeCapacityInfo);
        return this;
    }

    /**
     * Get the nodeCapacityInfos property: The dictionary of individual node names and node capacities in the cluster.
     * 
     * @return the nodeCapacityInfos value.
     */
    public Map<String, HostCapacity> nodeCapacityInfos() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeCapacityInfos();
    }

    /**
     * Set the nodeCapacityInfos property: The dictionary of individual node names and node capacities in the cluster.
     * 
     * @param nodeCapacityInfos the nodeCapacityInfos value to set.
     * @return the DeviceCapacityInfoInner object itself.
     */
    public DeviceCapacityInfoInner withNodeCapacityInfos(Map<String, HostCapacity> nodeCapacityInfos) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityInfoProperties();
        }
        this.innerProperties().withNodeCapacityInfos(nodeCapacityInfos);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceCapacityInfoInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceCapacityInfoInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceCapacityInfoInner.
     */
    public static DeviceCapacityInfoInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceCapacityInfoInner deserializedDeviceCapacityInfoInner = new DeviceCapacityInfoInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDeviceCapacityInfoInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDeviceCapacityInfoInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDeviceCapacityInfoInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDeviceCapacityInfoInner.innerProperties = DeviceCapacityInfoProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDeviceCapacityInfoInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceCapacityInfoInner;
        });
    }
}
