// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * List of VM sizes being checked for creation on appliance along with corresponding result.
 */
@Fluent
public final class VmPlacementRequestResult implements JsonSerializable<VmPlacementRequestResult> {
    /*
     * List of VM sizes being checked.
     */
    private List<String> vmSize;

    /*
     * Boolean value indicating if the VM(s) in VmSize can be created.
     */
    private Boolean isFeasible;

    /*
     * MessageCode indicating reason for success or failure.
     */
    private String messageCode;

    /*
     * Localized message to be displayed to the user to explain the check result.
     */
    private String message;

    /**
     * Creates an instance of VmPlacementRequestResult class.
     */
    public VmPlacementRequestResult() {
    }

    /**
     * Get the vmSize property: List of VM sizes being checked.
     * 
     * @return the vmSize value.
     */
    public List<String> vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: List of VM sizes being checked.
     * 
     * @param vmSize the vmSize value to set.
     * @return the VmPlacementRequestResult object itself.
     */
    public VmPlacementRequestResult withVmSize(List<String> vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the isFeasible property: Boolean value indicating if the VM(s) in VmSize can be created.
     * 
     * @return the isFeasible value.
     */
    public Boolean isFeasible() {
        return this.isFeasible;
    }

    /**
     * Set the isFeasible property: Boolean value indicating if the VM(s) in VmSize can be created.
     * 
     * @param isFeasible the isFeasible value to set.
     * @return the VmPlacementRequestResult object itself.
     */
    public VmPlacementRequestResult withIsFeasible(Boolean isFeasible) {
        this.isFeasible = isFeasible;
        return this;
    }

    /**
     * Get the messageCode property: MessageCode indicating reason for success or failure.
     * 
     * @return the messageCode value.
     */
    public String messageCode() {
        return this.messageCode;
    }

    /**
     * Set the messageCode property: MessageCode indicating reason for success or failure.
     * 
     * @param messageCode the messageCode value to set.
     * @return the VmPlacementRequestResult object itself.
     */
    public VmPlacementRequestResult withMessageCode(String messageCode) {
        this.messageCode = messageCode;
        return this;
    }

    /**
     * Get the message property: Localized message to be displayed to the user to explain the check result.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Localized message to be displayed to the user to explain the check result.
     * 
     * @param message the message value to set.
     * @return the VmPlacementRequestResult object itself.
     */
    public VmPlacementRequestResult withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vmSize", this.vmSize, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isFeasible", this.isFeasible);
        jsonWriter.writeStringField("messageCode", this.messageCode);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmPlacementRequestResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmPlacementRequestResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmPlacementRequestResult.
     */
    public static VmPlacementRequestResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmPlacementRequestResult deserializedVmPlacementRequestResult = new VmPlacementRequestResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmSize".equals(fieldName)) {
                    List<String> vmSize = reader.readArray(reader1 -> reader1.getString());
                    deserializedVmPlacementRequestResult.vmSize = vmSize;
                } else if ("isFeasible".equals(fieldName)) {
                    deserializedVmPlacementRequestResult.isFeasible = reader.getNullable(JsonReader::getBoolean);
                } else if ("messageCode".equals(fieldName)) {
                    deserializedVmPlacementRequestResult.messageCode = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedVmPlacementRequestResult.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmPlacementRequestResult;
        });
    }
}
