// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.SubscriptionRegisteredFeatures;
import java.io.IOException;
import java.util.List;

/**
 * The SubscriptionProperties model.
 */
@Fluent
public final class SubscriptionProperties implements JsonSerializable<SubscriptionProperties> {
    /*
     * The tenantId property.
     */
    private String tenantId;

    /*
     * The locationPlacementId property.
     */
    private String locationPlacementId;

    /*
     * The quotaId property.
     */
    private String quotaId;

    /*
     * The serializedDetails property.
     */
    private String serializedDetails;

    /*
     * The registeredFeatures property.
     */
    private List<SubscriptionRegisteredFeatures> registeredFeatures;

    /**
     * Creates an instance of SubscriptionProperties class.
     */
    public SubscriptionProperties() {
    }

    /**
     * Get the tenantId property: The tenantId property.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenantId property.
     * 
     * @param tenantId the tenantId value to set.
     * @return the SubscriptionProperties object itself.
     */
    public SubscriptionProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the locationPlacementId property: The locationPlacementId property.
     * 
     * @return the locationPlacementId value.
     */
    public String locationPlacementId() {
        return this.locationPlacementId;
    }

    /**
     * Set the locationPlacementId property: The locationPlacementId property.
     * 
     * @param locationPlacementId the locationPlacementId value to set.
     * @return the SubscriptionProperties object itself.
     */
    public SubscriptionProperties withLocationPlacementId(String locationPlacementId) {
        this.locationPlacementId = locationPlacementId;
        return this;
    }

    /**
     * Get the quotaId property: The quotaId property.
     * 
     * @return the quotaId value.
     */
    public String quotaId() {
        return this.quotaId;
    }

    /**
     * Set the quotaId property: The quotaId property.
     * 
     * @param quotaId the quotaId value to set.
     * @return the SubscriptionProperties object itself.
     */
    public SubscriptionProperties withQuotaId(String quotaId) {
        this.quotaId = quotaId;
        return this;
    }

    /**
     * Get the serializedDetails property: The serializedDetails property.
     * 
     * @return the serializedDetails value.
     */
    public String serializedDetails() {
        return this.serializedDetails;
    }

    /**
     * Set the serializedDetails property: The serializedDetails property.
     * 
     * @param serializedDetails the serializedDetails value to set.
     * @return the SubscriptionProperties object itself.
     */
    public SubscriptionProperties withSerializedDetails(String serializedDetails) {
        this.serializedDetails = serializedDetails;
        return this;
    }

    /**
     * Get the registeredFeatures property: The registeredFeatures property.
     * 
     * @return the registeredFeatures value.
     */
    public List<SubscriptionRegisteredFeatures> registeredFeatures() {
        return this.registeredFeatures;
    }

    /**
     * Set the registeredFeatures property: The registeredFeatures property.
     * 
     * @param registeredFeatures the registeredFeatures value to set.
     * @return the SubscriptionProperties object itself.
     */
    public SubscriptionProperties withRegisteredFeatures(List<SubscriptionRegisteredFeatures> registeredFeatures) {
        this.registeredFeatures = registeredFeatures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registeredFeatures() != null) {
            registeredFeatures().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("locationPlacementId", this.locationPlacementId);
        jsonWriter.writeStringField("quotaId", this.quotaId);
        jsonWriter.writeStringField("serializedDetails", this.serializedDetails);
        jsonWriter.writeArrayField("registeredFeatures", this.registeredFeatures,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubscriptionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubscriptionProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubscriptionProperties.
     */
    public static SubscriptionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubscriptionProperties deserializedSubscriptionProperties = new SubscriptionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedSubscriptionProperties.tenantId = reader.getString();
                } else if ("locationPlacementId".equals(fieldName)) {
                    deserializedSubscriptionProperties.locationPlacementId = reader.getString();
                } else if ("quotaId".equals(fieldName)) {
                    deserializedSubscriptionProperties.quotaId = reader.getString();
                } else if ("serializedDetails".equals(fieldName)) {
                    deserializedSubscriptionProperties.serializedDetails = reader.getString();
                } else if ("registeredFeatures".equals(fieldName)) {
                    List<SubscriptionRegisteredFeatures> registeredFeatures
                        = reader.readArray(reader1 -> SubscriptionRegisteredFeatures.fromJson(reader1));
                    deserializedSubscriptionProperties.registeredFeatures = registeredFeatures;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriptionProperties;
        });
    }
}
