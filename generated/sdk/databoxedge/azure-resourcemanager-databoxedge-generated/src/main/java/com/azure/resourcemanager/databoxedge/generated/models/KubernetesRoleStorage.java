// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Kubernetes role storage resource.
 */
@Fluent
public final class KubernetesRoleStorage implements JsonSerializable<KubernetesRoleStorage> {
    /*
     * Kubernetes storage class info.
     */
    private List<KubernetesRoleStorageClassInfo> storageClasses;

    /*
     * Mount points of shares in role(s).
     */
    private List<MountPointMap> endpoints;

    /**
     * Creates an instance of KubernetesRoleStorage class.
     */
    public KubernetesRoleStorage() {
    }

    /**
     * Get the storageClasses property: Kubernetes storage class info.
     * 
     * @return the storageClasses value.
     */
    public List<KubernetesRoleStorageClassInfo> storageClasses() {
        return this.storageClasses;
    }

    /**
     * Get the endpoints property: Mount points of shares in role(s).
     * 
     * @return the endpoints value.
     */
    public List<MountPointMap> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Mount points of shares in role(s).
     * 
     * @param endpoints the endpoints value to set.
     * @return the KubernetesRoleStorage object itself.
     */
    public KubernetesRoleStorage withEndpoints(List<MountPointMap> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageClasses() != null) {
            storageClasses().forEach(e -> e.validate());
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesRoleStorage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesRoleStorage if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesRoleStorage.
     */
    public static KubernetesRoleStorage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesRoleStorage deserializedKubernetesRoleStorage = new KubernetesRoleStorage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageClasses".equals(fieldName)) {
                    List<KubernetesRoleStorageClassInfo> storageClasses
                        = reader.readArray(reader1 -> KubernetesRoleStorageClassInfo.fromJson(reader1));
                    deserializedKubernetesRoleStorage.storageClasses = storageClasses;
                } else if ("endpoints".equals(fieldName)) {
                    List<MountPointMap> endpoints = reader.readArray(reader1 -> MountPointMap.fromJson(reader1));
                    deserializedKubernetesRoleStorage.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesRoleStorage;
        });
    }
}
