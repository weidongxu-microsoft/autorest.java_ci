// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Load balancer configuration.
 */
@Fluent
public final class LoadBalancerConfig implements JsonSerializable<LoadBalancerConfig> {
    /*
     * Load balancer type
     */
    private String type;

    /*
     * Load balancer version
     */
    private String version;

    /*
     * Load balancer ipconfig
     */
    private List<String> ipRange;

    /**
     * Creates an instance of LoadBalancerConfig class.
     */
    public LoadBalancerConfig() {
    }

    /**
     * Get the type property: Load balancer type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the version property: Load balancer version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the ipRange property: Load balancer ipconfig.
     * 
     * @return the ipRange value.
     */
    public List<String> ipRange() {
        return this.ipRange;
    }

    /**
     * Set the ipRange property: Load balancer ipconfig.
     * 
     * @param ipRange the ipRange value to set.
     * @return the LoadBalancerConfig object itself.
     */
    public LoadBalancerConfig withIpRange(List<String> ipRange) {
        this.ipRange = ipRange;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipRange", this.ipRange, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancerConfig.
     */
    public static LoadBalancerConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerConfig deserializedLoadBalancerConfig = new LoadBalancerConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedLoadBalancerConfig.type = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedLoadBalancerConfig.version = reader.getString();
                } else if ("ipRange".equals(fieldName)) {
                    List<String> ipRange = reader.readArray(reader1 -> reader1.getString());
                    deserializedLoadBalancerConfig.ipRange = ipRange;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerConfig;
        });
    }
}
