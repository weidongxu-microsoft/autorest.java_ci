// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.DeviceCapacityRequestInfoProperties;
import java.io.IOException;
import java.util.List;

/**
 * Object for Capturing DeviceCapacityRequestInfo.
 */
@Fluent
public final class DeviceCapacityRequestInfo implements JsonSerializable<DeviceCapacityRequestInfo> {
    /*
     * The properties of the Device Capacity Request.
     */
    private DeviceCapacityRequestInfoProperties innerProperties = new DeviceCapacityRequestInfoProperties();

    /**
     * Creates an instance of DeviceCapacityRequestInfo class.
     */
    public DeviceCapacityRequestInfo() {
    }

    /**
     * Get the innerProperties property: The properties of the Device Capacity Request.
     * 
     * @return the innerProperties value.
     */
    private DeviceCapacityRequestInfoProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the vmPlacementQuery property: Array containing the sizes of the VMs for checking if its feasible to create
     * them on the appliance.
     * 
     * @return the vmPlacementQuery value.
     */
    public List<List<String>> vmPlacementQuery() {
        return this.innerProperties() == null ? null : this.innerProperties().vmPlacementQuery();
    }

    /**
     * Set the vmPlacementQuery property: Array containing the sizes of the VMs for checking if its feasible to create
     * them on the appliance.
     * 
     * @param vmPlacementQuery the vmPlacementQuery value to set.
     * @return the DeviceCapacityRequestInfo object itself.
     */
    public DeviceCapacityRequestInfo withVmPlacementQuery(List<List<String>> vmPlacementQuery) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityRequestInfoProperties();
        }
        this.innerProperties().withVmPlacementQuery(vmPlacementQuery);
        return this;
    }

    /**
     * Get the vmPlacementResults property: Array of the VMs of the sizes in VmSizes can be provisioned on the
     * appliance.
     * 
     * @return the vmPlacementResults value.
     */
    public List<VmPlacementRequestResult> vmPlacementResults() {
        return this.innerProperties() == null ? null : this.innerProperties().vmPlacementResults();
    }

    /**
     * Set the vmPlacementResults property: Array of the VMs of the sizes in VmSizes can be provisioned on the
     * appliance.
     * 
     * @param vmPlacementResults the vmPlacementResults value to set.
     * @return the DeviceCapacityRequestInfo object itself.
     */
    public DeviceCapacityRequestInfo withVmPlacementResults(List<VmPlacementRequestResult> vmPlacementResults) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityRequestInfoProperties();
        }
        this.innerProperties().withVmPlacementResults(vmPlacementResults);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model DeviceCapacityRequestInfo"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeviceCapacityRequestInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceCapacityRequestInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceCapacityRequestInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceCapacityRequestInfo.
     */
    public static DeviceCapacityRequestInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceCapacityRequestInfo deserializedDeviceCapacityRequestInfo = new DeviceCapacityRequestInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedDeviceCapacityRequestInfo.innerProperties
                        = DeviceCapacityRequestInfoProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceCapacityRequestInfo;
        });
    }
}
