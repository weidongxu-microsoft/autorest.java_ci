// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Metric configuration.
 */
@Fluent
public final class MetricConfiguration implements JsonSerializable<MetricConfiguration> {
    /*
     * The Resource ID on which the metrics should be pushed.
     */
    private String resourceId;

    /*
     * The MDM account to which the counters should be pushed.
     */
    private String mdmAccount;

    /*
     * The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
     */
    private String metricNameSpace;

    /*
     * Host name for the IoT hub associated to the device.
     */
    private List<MetricCounterSet> counterSets;

    /**
     * Creates an instance of MetricConfiguration class.
     */
    public MetricConfiguration() {
    }

    /**
     * Get the resourceId property: The Resource ID on which the metrics should be pushed.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The Resource ID on which the metrics should be pushed.
     * 
     * @param resourceId the resourceId value to set.
     * @return the MetricConfiguration object itself.
     */
    public MetricConfiguration withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the mdmAccount property: The MDM account to which the counters should be pushed.
     * 
     * @return the mdmAccount value.
     */
    public String mdmAccount() {
        return this.mdmAccount;
    }

    /**
     * Set the mdmAccount property: The MDM account to which the counters should be pushed.
     * 
     * @param mdmAccount the mdmAccount value to set.
     * @return the MetricConfiguration object itself.
     */
    public MetricConfiguration withMdmAccount(String mdmAccount) {
        this.mdmAccount = mdmAccount;
        return this;
    }

    /**
     * Get the metricNameSpace property: The MDM namespace to which the counters should be pushed. This is required if
     * MDMAccount is specified.
     * 
     * @return the metricNameSpace value.
     */
    public String metricNameSpace() {
        return this.metricNameSpace;
    }

    /**
     * Set the metricNameSpace property: The MDM namespace to which the counters should be pushed. This is required if
     * MDMAccount is specified.
     * 
     * @param metricNameSpace the metricNameSpace value to set.
     * @return the MetricConfiguration object itself.
     */
    public MetricConfiguration withMetricNameSpace(String metricNameSpace) {
        this.metricNameSpace = metricNameSpace;
        return this;
    }

    /**
     * Get the counterSets property: Host name for the IoT hub associated to the device.
     * 
     * @return the counterSets value.
     */
    public List<MetricCounterSet> counterSets() {
        return this.counterSets;
    }

    /**
     * Set the counterSets property: Host name for the IoT hub associated to the device.
     * 
     * @param counterSets the counterSets value to set.
     * @return the MetricConfiguration object itself.
     */
    public MetricConfiguration withCounterSets(List<MetricCounterSet> counterSets) {
        this.counterSets = counterSets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceId in model MetricConfiguration"));
        }
        if (counterSets() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property counterSets in model MetricConfiguration"));
        } else {
            counterSets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetricConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeArrayField("counterSets", this.counterSets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("mdmAccount", this.mdmAccount);
        jsonWriter.writeStringField("metricNameSpace", this.metricNameSpace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricConfiguration.
     */
    public static MetricConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricConfiguration deserializedMetricConfiguration = new MetricConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedMetricConfiguration.resourceId = reader.getString();
                } else if ("counterSets".equals(fieldName)) {
                    List<MetricCounterSet> counterSets
                        = reader.readArray(reader1 -> MetricCounterSet.fromJson(reader1));
                    deserializedMetricConfiguration.counterSets = counterSets;
                } else if ("mdmAccount".equals(fieldName)) {
                    deserializedMetricConfiguration.mdmAccount = reader.getString();
                } else if ("metricNameSpace".equals(fieldName)) {
                    deserializedMetricConfiguration.metricNameSpace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricConfiguration;
        });
    }
}
