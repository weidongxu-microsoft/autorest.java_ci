// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Kubernetes node info.
 */
@Fluent
public final class NodeInfo implements JsonSerializable<NodeInfo> {
    /*
     * Node name.
     */
    private String name;

    /*
     * Node type - Master/Worker
     */
    private KubernetesNodeType type;

    /*
     * IP Configuration of the Kubernetes node.
     */
    private List<KubernetesIpConfiguration> ipConfiguration;

    /**
     * Creates an instance of NodeInfo class.
     */
    public NodeInfo() {
    }

    /**
     * Get the name property: Node name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Node type - Master/Worker.
     * 
     * @return the type value.
     */
    public KubernetesNodeType type() {
        return this.type;
    }

    /**
     * Get the ipConfiguration property: IP Configuration of the Kubernetes node.
     * 
     * @return the ipConfiguration value.
     */
    public List<KubernetesIpConfiguration> ipConfiguration() {
        return this.ipConfiguration;
    }

    /**
     * Set the ipConfiguration property: IP Configuration of the Kubernetes node.
     * 
     * @param ipConfiguration the ipConfiguration value to set.
     * @return the NodeInfo object itself.
     */
    public NodeInfo withIpConfiguration(List<KubernetesIpConfiguration> ipConfiguration) {
        this.ipConfiguration = ipConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipConfiguration() != null) {
            ipConfiguration().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ipConfiguration", this.ipConfiguration,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the NodeInfo.
     */
    public static NodeInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeInfo deserializedNodeInfo = new NodeInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedNodeInfo.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNodeInfo.type = KubernetesNodeType.fromString(reader.getString());
                } else if ("ipConfiguration".equals(fieldName)) {
                    List<KubernetesIpConfiguration> ipConfiguration
                        = reader.readArray(reader1 -> KubernetesIpConfiguration.fromJson(reader1));
                    deserializedNodeInfo.ipConfiguration = ipConfiguration;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeInfo;
        });
    }
}
