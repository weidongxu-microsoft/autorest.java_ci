// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Cluster Compute Data.
 */
@Fluent
public final class ClusterCapacityViewData implements JsonSerializable<ClusterCapacityViewData> {
    /*
     * The FQDN of the cluster.
     */
    private String fqdn;

    /*
     * The cluster's GPU capacity.
     */
    private ClusterGpuCapacity gpuCapacity;

    /*
     * The cluster's memory capacity.
     */
    private ClusterMemoryCapacity memoryCapacity;

    /*
     * The last time at which the ClusterCapacityViewData was set.
     */
    private OffsetDateTime lastRefreshedTime;

    /*
     * The total # of vCPUs provisioned by non-HPN VM per appliance.
     */
    private Long totalProvisionedNonHpnCores;

    /**
     * Creates an instance of ClusterCapacityViewData class.
     */
    public ClusterCapacityViewData() {
    }

    /**
     * Get the fqdn property: The FQDN of the cluster.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Set the fqdn property: The FQDN of the cluster.
     * 
     * @param fqdn the fqdn value to set.
     * @return the ClusterCapacityViewData object itself.
     */
    public ClusterCapacityViewData withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }

    /**
     * Get the gpuCapacity property: The cluster's GPU capacity.
     * 
     * @return the gpuCapacity value.
     */
    public ClusterGpuCapacity gpuCapacity() {
        return this.gpuCapacity;
    }

    /**
     * Set the gpuCapacity property: The cluster's GPU capacity.
     * 
     * @param gpuCapacity the gpuCapacity value to set.
     * @return the ClusterCapacityViewData object itself.
     */
    public ClusterCapacityViewData withGpuCapacity(ClusterGpuCapacity gpuCapacity) {
        this.gpuCapacity = gpuCapacity;
        return this;
    }

    /**
     * Get the memoryCapacity property: The cluster's memory capacity.
     * 
     * @return the memoryCapacity value.
     */
    public ClusterMemoryCapacity memoryCapacity() {
        return this.memoryCapacity;
    }

    /**
     * Set the memoryCapacity property: The cluster's memory capacity.
     * 
     * @param memoryCapacity the memoryCapacity value to set.
     * @return the ClusterCapacityViewData object itself.
     */
    public ClusterCapacityViewData withMemoryCapacity(ClusterMemoryCapacity memoryCapacity) {
        this.memoryCapacity = memoryCapacity;
        return this;
    }

    /**
     * Get the lastRefreshedTime property: The last time at which the ClusterCapacityViewData was set.
     * 
     * @return the lastRefreshedTime value.
     */
    public OffsetDateTime lastRefreshedTime() {
        return this.lastRefreshedTime;
    }

    /**
     * Set the lastRefreshedTime property: The last time at which the ClusterCapacityViewData was set.
     * 
     * @param lastRefreshedTime the lastRefreshedTime value to set.
     * @return the ClusterCapacityViewData object itself.
     */
    public ClusterCapacityViewData withLastRefreshedTime(OffsetDateTime lastRefreshedTime) {
        this.lastRefreshedTime = lastRefreshedTime;
        return this;
    }

    /**
     * Get the totalProvisionedNonHpnCores property: The total # of vCPUs provisioned by non-HPN VM per appliance.
     * 
     * @return the totalProvisionedNonHpnCores value.
     */
    public Long totalProvisionedNonHpnCores() {
        return this.totalProvisionedNonHpnCores;
    }

    /**
     * Set the totalProvisionedNonHpnCores property: The total # of vCPUs provisioned by non-HPN VM per appliance.
     * 
     * @param totalProvisionedNonHpnCores the totalProvisionedNonHpnCores value to set.
     * @return the ClusterCapacityViewData object itself.
     */
    public ClusterCapacityViewData withTotalProvisionedNonHpnCores(Long totalProvisionedNonHpnCores) {
        this.totalProvisionedNonHpnCores = totalProvisionedNonHpnCores;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gpuCapacity() != null) {
            gpuCapacity().validate();
        }
        if (memoryCapacity() != null) {
            memoryCapacity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fqdn", this.fqdn);
        jsonWriter.writeJsonField("gpuCapacity", this.gpuCapacity);
        jsonWriter.writeJsonField("memoryCapacity", this.memoryCapacity);
        jsonWriter.writeStringField("lastRefreshedTime",
            this.lastRefreshedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastRefreshedTime));
        jsonWriter.writeNumberField("totalProvisionedNonHpnCores", this.totalProvisionedNonHpnCores);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterCapacityViewData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterCapacityViewData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterCapacityViewData.
     */
    public static ClusterCapacityViewData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterCapacityViewData deserializedClusterCapacityViewData = new ClusterCapacityViewData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fqdn".equals(fieldName)) {
                    deserializedClusterCapacityViewData.fqdn = reader.getString();
                } else if ("gpuCapacity".equals(fieldName)) {
                    deserializedClusterCapacityViewData.gpuCapacity = ClusterGpuCapacity.fromJson(reader);
                } else if ("memoryCapacity".equals(fieldName)) {
                    deserializedClusterCapacityViewData.memoryCapacity = ClusterMemoryCapacity.fromJson(reader);
                } else if ("lastRefreshedTime".equals(fieldName)) {
                    deserializedClusterCapacityViewData.lastRefreshedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalProvisionedNonHpnCores".equals(fieldName)) {
                    deserializedClusterCapacityViewData.totalProvisionedNonHpnCores
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterCapacityViewData;
        });
    }
}
