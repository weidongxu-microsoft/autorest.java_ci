// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Used in activation key generation flow.
 */
@Fluent
public final class GenerateCertResponseInner implements JsonSerializable<GenerateCertResponseInner> {
    /*
     * Gets or sets base64 encoded certificate raw data,
     * this is the public part needed to be uploaded to cert vault
     */
    private String publicKey;

    /*
     * Gets or sets base64 encoded private part of the certificate,
     * needed to form the activation key
     */
    private String privateKey;

    /*
     * Gets or sets expiry time in UTC
     */
    private String expiryTimeInUtc;

    /**
     * Creates an instance of GenerateCertResponseInner class.
     */
    public GenerateCertResponseInner() {
    }

    /**
     * Get the publicKey property: Gets or sets base64 encoded certificate raw data,
     * this is the public part needed to be uploaded to cert vault.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Set the publicKey property: Gets or sets base64 encoded certificate raw data,
     * this is the public part needed to be uploaded to cert vault.
     * 
     * @param publicKey the publicKey value to set.
     * @return the GenerateCertResponseInner object itself.
     */
    public GenerateCertResponseInner withPublicKey(String publicKey) {
        this.publicKey = publicKey;
        return this;
    }

    /**
     * Get the privateKey property: Gets or sets base64 encoded private part of the certificate,
     * needed to form the activation key.
     * 
     * @return the privateKey value.
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: Gets or sets base64 encoded private part of the certificate,
     * needed to form the activation key.
     * 
     * @param privateKey the privateKey value to set.
     * @return the GenerateCertResponseInner object itself.
     */
    public GenerateCertResponseInner withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get the expiryTimeInUtc property: Gets or sets expiry time in UTC.
     * 
     * @return the expiryTimeInUtc value.
     */
    public String expiryTimeInUtc() {
        return this.expiryTimeInUtc;
    }

    /**
     * Set the expiryTimeInUtc property: Gets or sets expiry time in UTC.
     * 
     * @param expiryTimeInUtc the expiryTimeInUtc value to set.
     * @return the GenerateCertResponseInner object itself.
     */
    public GenerateCertResponseInner withExpiryTimeInUtc(String expiryTimeInUtc) {
        this.expiryTimeInUtc = expiryTimeInUtc;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publicKey", this.publicKey);
        jsonWriter.writeStringField("privateKey", this.privateKey);
        jsonWriter.writeStringField("expiryTimeInUTC", this.expiryTimeInUtc);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenerateCertResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenerateCertResponseInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenerateCertResponseInner.
     */
    public static GenerateCertResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenerateCertResponseInner deserializedGenerateCertResponseInner = new GenerateCertResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publicKey".equals(fieldName)) {
                    deserializedGenerateCertResponseInner.publicKey = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedGenerateCertResponseInner.privateKey = reader.getString();
                } else if ("expiryTimeInUTC".equals(fieldName)) {
                    deserializedGenerateCertResponseInner.expiryTimeInUtc = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenerateCertResponseInner;
        });
    }
}
