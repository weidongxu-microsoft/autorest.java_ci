// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.ClusterCapacityViewData;
import com.azure.resourcemanager.databoxedge.generated.models.ClusterStorageViewData;
import com.azure.resourcemanager.databoxedge.generated.models.HostCapacity;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * The properties of Device Capacity Info.
 */
@Fluent
public final class DeviceCapacityInfoProperties implements JsonSerializable<DeviceCapacityInfoProperties> {
    /*
     * Timestamp of request in UTC
     */
    private OffsetDateTime timestamp;

    /*
     * Cluster capacity data for storage resources (CSV).
     */
    private ClusterStorageViewData clusterStorageCapacityInfo;

    /*
     * Cluster capacity data for compute resources (Memory and GPU).
     */
    private ClusterCapacityViewData clusterComputeCapacityInfo;

    /*
     * The dictionary of individual node names and node capacities in the cluster.
     */
    private Map<String, HostCapacity> nodeCapacityInfos;

    /**
     * Creates an instance of DeviceCapacityInfoProperties class.
     */
    public DeviceCapacityInfoProperties() {
    }

    /**
     * Get the timestamp property: Timestamp of request in UTC.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Timestamp of request in UTC.
     * 
     * @param timestamp the timestamp value to set.
     * @return the DeviceCapacityInfoProperties object itself.
     */
    public DeviceCapacityInfoProperties withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the clusterStorageCapacityInfo property: Cluster capacity data for storage resources (CSV).
     * 
     * @return the clusterStorageCapacityInfo value.
     */
    public ClusterStorageViewData clusterStorageCapacityInfo() {
        return this.clusterStorageCapacityInfo;
    }

    /**
     * Set the clusterStorageCapacityInfo property: Cluster capacity data for storage resources (CSV).
     * 
     * @param clusterStorageCapacityInfo the clusterStorageCapacityInfo value to set.
     * @return the DeviceCapacityInfoProperties object itself.
     */
    public DeviceCapacityInfoProperties
        withClusterStorageCapacityInfo(ClusterStorageViewData clusterStorageCapacityInfo) {
        this.clusterStorageCapacityInfo = clusterStorageCapacityInfo;
        return this;
    }

    /**
     * Get the clusterComputeCapacityInfo property: Cluster capacity data for compute resources (Memory and GPU).
     * 
     * @return the clusterComputeCapacityInfo value.
     */
    public ClusterCapacityViewData clusterComputeCapacityInfo() {
        return this.clusterComputeCapacityInfo;
    }

    /**
     * Set the clusterComputeCapacityInfo property: Cluster capacity data for compute resources (Memory and GPU).
     * 
     * @param clusterComputeCapacityInfo the clusterComputeCapacityInfo value to set.
     * @return the DeviceCapacityInfoProperties object itself.
     */
    public DeviceCapacityInfoProperties
        withClusterComputeCapacityInfo(ClusterCapacityViewData clusterComputeCapacityInfo) {
        this.clusterComputeCapacityInfo = clusterComputeCapacityInfo;
        return this;
    }

    /**
     * Get the nodeCapacityInfos property: The dictionary of individual node names and node capacities in the cluster.
     * 
     * @return the nodeCapacityInfos value.
     */
    public Map<String, HostCapacity> nodeCapacityInfos() {
        return this.nodeCapacityInfos;
    }

    /**
     * Set the nodeCapacityInfos property: The dictionary of individual node names and node capacities in the cluster.
     * 
     * @param nodeCapacityInfos the nodeCapacityInfos value to set.
     * @return the DeviceCapacityInfoProperties object itself.
     */
    public DeviceCapacityInfoProperties withNodeCapacityInfos(Map<String, HostCapacity> nodeCapacityInfos) {
        this.nodeCapacityInfos = nodeCapacityInfos;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterStorageCapacityInfo() != null) {
            clusterStorageCapacityInfo().validate();
        }
        if (clusterComputeCapacityInfo() != null) {
            clusterComputeCapacityInfo().validate();
        }
        if (nodeCapacityInfos() != null) {
            nodeCapacityInfos().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeStamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeJsonField("clusterStorageCapacityInfo", this.clusterStorageCapacityInfo);
        jsonWriter.writeJsonField("clusterComputeCapacityInfo", this.clusterComputeCapacityInfo);
        jsonWriter.writeMapField("nodeCapacityInfos", this.nodeCapacityInfos,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceCapacityInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceCapacityInfoProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeviceCapacityInfoProperties.
     */
    public static DeviceCapacityInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceCapacityInfoProperties deserializedDeviceCapacityInfoProperties = new DeviceCapacityInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeStamp".equals(fieldName)) {
                    deserializedDeviceCapacityInfoProperties.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("clusterStorageCapacityInfo".equals(fieldName)) {
                    deserializedDeviceCapacityInfoProperties.clusterStorageCapacityInfo
                        = ClusterStorageViewData.fromJson(reader);
                } else if ("clusterComputeCapacityInfo".equals(fieldName)) {
                    deserializedDeviceCapacityInfoProperties.clusterComputeCapacityInfo
                        = ClusterCapacityViewData.fromJson(reader);
                } else if ("nodeCapacityInfos".equals(fieldName)) {
                    Map<String, HostCapacity> nodeCapacityInfos
                        = reader.readMap(reader1 -> HostCapacity.fromJson(reader1));
                    deserializedDeviceCapacityInfoProperties.nodeCapacityInfos = nodeCapacityInfos;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeviceCapacityInfoProperties;
        });
    }
}
