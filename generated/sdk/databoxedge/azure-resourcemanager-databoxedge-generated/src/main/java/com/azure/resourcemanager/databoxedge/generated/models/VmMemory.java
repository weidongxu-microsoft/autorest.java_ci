// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VmMemory Data.
 */
@Fluent
public final class VmMemory implements JsonSerializable<VmMemory> {
    /*
     * The total amount of RAM in the virtual machine, as seen by the guest operating system. For a virtual machine with
     * dynamic memory enabled, this represents the initial memory available at startup.
     */
    private Long startupMemoryMB;

    /*
     * The current memory used by the virtual machine.
     */
    private Long currentMemoryUsageMB;

    /**
     * Creates an instance of VmMemory class.
     */
    public VmMemory() {
    }

    /**
     * Get the startupMemoryMB property: The total amount of RAM in the virtual machine, as seen by the guest operating
     * system. For a virtual machine with dynamic memory enabled, this represents the initial memory available at
     * startup.
     * 
     * @return the startupMemoryMB value.
     */
    public Long startupMemoryMB() {
        return this.startupMemoryMB;
    }

    /**
     * Set the startupMemoryMB property: The total amount of RAM in the virtual machine, as seen by the guest operating
     * system. For a virtual machine with dynamic memory enabled, this represents the initial memory available at
     * startup.
     * 
     * @param startupMemoryMB the startupMemoryMB value to set.
     * @return the VmMemory object itself.
     */
    public VmMemory withStartupMemoryMB(Long startupMemoryMB) {
        this.startupMemoryMB = startupMemoryMB;
        return this;
    }

    /**
     * Get the currentMemoryUsageMB property: The current memory used by the virtual machine.
     * 
     * @return the currentMemoryUsageMB value.
     */
    public Long currentMemoryUsageMB() {
        return this.currentMemoryUsageMB;
    }

    /**
     * Set the currentMemoryUsageMB property: The current memory used by the virtual machine.
     * 
     * @param currentMemoryUsageMB the currentMemoryUsageMB value to set.
     * @return the VmMemory object itself.
     */
    public VmMemory withCurrentMemoryUsageMB(Long currentMemoryUsageMB) {
        this.currentMemoryUsageMB = currentMemoryUsageMB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("startupMemoryMB", this.startupMemoryMB);
        jsonWriter.writeNumberField("currentMemoryUsageMB", this.currentMemoryUsageMB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmMemory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmMemory if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the VmMemory.
     */
    public static VmMemory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmMemory deserializedVmMemory = new VmMemory();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startupMemoryMB".equals(fieldName)) {
                    deserializedVmMemory.startupMemoryMB = reader.getNullable(JsonReader::getLong);
                } else if ("currentMemoryUsageMB".equals(fieldName)) {
                    deserializedVmMemory.currentMemoryUsageMB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmMemory;
        });
    }
}
