// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The metric counter set.
 */
@Fluent
public final class MetricCounterSet implements JsonSerializable<MetricCounterSet> {
    /*
     * The counters that should be collected in this set.
     */
    private List<MetricCounter> counters;

    /**
     * Creates an instance of MetricCounterSet class.
     */
    public MetricCounterSet() {
    }

    /**
     * Get the counters property: The counters that should be collected in this set.
     * 
     * @return the counters value.
     */
    public List<MetricCounter> counters() {
        return this.counters;
    }

    /**
     * Set the counters property: The counters that should be collected in this set.
     * 
     * @param counters the counters value to set.
     * @return the MetricCounterSet object itself.
     */
    public MetricCounterSet withCounters(List<MetricCounter> counters) {
        this.counters = counters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (counters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property counters in model MetricCounterSet"));
        } else {
            counters().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetricCounterSet.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("counters", this.counters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricCounterSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricCounterSet if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricCounterSet.
     */
    public static MetricCounterSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricCounterSet deserializedMetricCounterSet = new MetricCounterSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("counters".equals(fieldName)) {
                    List<MetricCounter> counters = reader.readArray(reader1 -> MetricCounter.fromJson(reader1));
                    deserializedMetricCounterSet.counters = counters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricCounterSet;
        });
    }
}
