// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.AddonState;
import com.azure.resourcemanager.databoxedge.generated.models.HostPlatformType;
import com.azure.resourcemanager.databoxedge.generated.models.PlatformType;
import java.io.IOException;

/**
 * Arc addon properties.
 */
@Fluent
public final class ArcAddonProperties implements JsonSerializable<ArcAddonProperties> {
    /*
     * Arc resource subscription Id
     */
    private String subscriptionId;

    /*
     * Arc resource group name
     */
    private String resourceGroupName;

    /*
     * Arc resource Name
     */
    private String resourceName;

    /*
     * Arc resource location
     */
    private String resourceLocation;

    /*
     * Arc resource version
     */
    private String version;

    /*
     * Host OS supported by the Arc addon.
     */
    private PlatformType hostPlatform;

    /*
     * Platform where the runtime is hosted.
     */
    private HostPlatformType hostPlatformType;

    /*
     * Addon Provisioning State
     */
    private AddonState provisioningState;

    /**
     * Creates an instance of ArcAddonProperties class.
     */
    public ArcAddonProperties() {
    }

    /**
     * Get the subscriptionId property: Arc resource subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Arc resource subscription Id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the ArcAddonProperties object itself.
     */
    public ArcAddonProperties withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroupName property: Arc resource group name.
     * 
     * @return the resourceGroupName value.
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Set the resourceGroupName property: Arc resource group name.
     * 
     * @param resourceGroupName the resourceGroupName value to set.
     * @return the ArcAddonProperties object itself.
     */
    public ArcAddonProperties withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    /**
     * Get the resourceName property: Arc resource Name.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Arc resource Name.
     * 
     * @param resourceName the resourceName value to set.
     * @return the ArcAddonProperties object itself.
     */
    public ArcAddonProperties withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the resourceLocation property: Arc resource location.
     * 
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Set the resourceLocation property: Arc resource location.
     * 
     * @param resourceLocation the resourceLocation value to set.
     * @return the ArcAddonProperties object itself.
     */
    public ArcAddonProperties withResourceLocation(String resourceLocation) {
        this.resourceLocation = resourceLocation;
        return this;
    }

    /**
     * Get the version property: Arc resource version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the hostPlatform property: Host OS supported by the Arc addon.
     * 
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     * 
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the provisioningState property: Addon Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public AddonState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionId in model ArcAddonProperties"));
        }
        if (resourceGroupName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceGroupName in model ArcAddonProperties"));
        }
        if (resourceName() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property resourceName in model ArcAddonProperties"));
        }
        if (resourceLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceLocation in model ArcAddonProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ArcAddonProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroupName", this.resourceGroupName);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        jsonWriter.writeStringField("resourceLocation", this.resourceLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArcAddonProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArcAddonProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArcAddonProperties.
     */
    public static ArcAddonProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArcAddonProperties deserializedArcAddonProperties = new ArcAddonProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedArcAddonProperties.subscriptionId = reader.getString();
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedArcAddonProperties.resourceGroupName = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedArcAddonProperties.resourceName = reader.getString();
                } else if ("resourceLocation".equals(fieldName)) {
                    deserializedArcAddonProperties.resourceLocation = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedArcAddonProperties.version = reader.getString();
                } else if ("hostPlatform".equals(fieldName)) {
                    deserializedArcAddonProperties.hostPlatform = PlatformType.fromString(reader.getString());
                } else if ("hostPlatformType".equals(fieldName)) {
                    deserializedArcAddonProperties.hostPlatformType = HostPlatformType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedArcAddonProperties.provisioningState = AddonState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArcAddonProperties;
        });
    }
}
