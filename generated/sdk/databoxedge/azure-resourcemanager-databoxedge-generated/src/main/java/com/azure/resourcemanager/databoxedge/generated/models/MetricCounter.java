// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The metric counter.
 */
@Fluent
public final class MetricCounter implements JsonSerializable<MetricCounter> {
    /*
     * The counter name.
     */
    private String name;

    /*
     * The instance from which counter should be collected.
     */
    private String instance;

    /*
     * The dimension filter.
     */
    private List<MetricDimension> dimensionFilter;

    /*
     * The additional dimensions to be added to metric.
     */
    private List<MetricDimension> additionalDimensions;

    /**
     * Creates an instance of MetricCounter class.
     */
    public MetricCounter() {
    }

    /**
     * Get the name property: The counter name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The counter name.
     * 
     * @param name the name value to set.
     * @return the MetricCounter object itself.
     */
    public MetricCounter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the instance property: The instance from which counter should be collected.
     * 
     * @return the instance value.
     */
    public String instance() {
        return this.instance;
    }

    /**
     * Set the instance property: The instance from which counter should be collected.
     * 
     * @param instance the instance value to set.
     * @return the MetricCounter object itself.
     */
    public MetricCounter withInstance(String instance) {
        this.instance = instance;
        return this;
    }

    /**
     * Get the dimensionFilter property: The dimension filter.
     * 
     * @return the dimensionFilter value.
     */
    public List<MetricDimension> dimensionFilter() {
        return this.dimensionFilter;
    }

    /**
     * Set the dimensionFilter property: The dimension filter.
     * 
     * @param dimensionFilter the dimensionFilter value to set.
     * @return the MetricCounter object itself.
     */
    public MetricCounter withDimensionFilter(List<MetricDimension> dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }

    /**
     * Get the additionalDimensions property: The additional dimensions to be added to metric.
     * 
     * @return the additionalDimensions value.
     */
    public List<MetricDimension> additionalDimensions() {
        return this.additionalDimensions;
    }

    /**
     * Set the additionalDimensions property: The additional dimensions to be added to metric.
     * 
     * @param additionalDimensions the additionalDimensions value to set.
     * @return the MetricCounter object itself.
     */
    public MetricCounter withAdditionalDimensions(List<MetricDimension> additionalDimensions) {
        this.additionalDimensions = additionalDimensions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model MetricCounter"));
        }
        if (dimensionFilter() != null) {
            dimensionFilter().forEach(e -> e.validate());
        }
        if (additionalDimensions() != null) {
            additionalDimensions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MetricCounter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("instance", this.instance);
        jsonWriter.writeArrayField("dimensionFilter", this.dimensionFilter,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("additionalDimensions", this.additionalDimensions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricCounter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricCounter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricCounter.
     */
    public static MetricCounter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricCounter deserializedMetricCounter = new MetricCounter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMetricCounter.name = reader.getString();
                } else if ("instance".equals(fieldName)) {
                    deserializedMetricCounter.instance = reader.getString();
                } else if ("dimensionFilter".equals(fieldName)) {
                    List<MetricDimension> dimensionFilter
                        = reader.readArray(reader1 -> MetricDimension.fromJson(reader1));
                    deserializedMetricCounter.dimensionFilter = dimensionFilter;
                } else if ("additionalDimensions".equals(fieldName)) {
                    List<MetricDimension> additionalDimensions
                        = reader.readArray(reader1 -> MetricDimension.fromJson(reader1));
                    deserializedMetricCounter.additionalDimensions = additionalDimensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricCounter;
        });
    }
}
