// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Holds device secret either as a KeyVault reference or as an encrypted value.
 */
@Fluent
public final class Secret implements JsonSerializable<Secret> {
    /*
     * Encrypted (using device public key) secret value.
     */
    private AsymmetricEncryptedSecret encryptedSecret;

    /*
     * Id of the Key-Vault where secret is stored (ex: secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
     */
    private String keyVaultId;

    /**
     * Creates an instance of Secret class.
     */
    public Secret() {
    }

    /**
     * Get the encryptedSecret property: Encrypted (using device public key) secret value.
     * 
     * @return the encryptedSecret value.
     */
    public AsymmetricEncryptedSecret encryptedSecret() {
        return this.encryptedSecret;
    }

    /**
     * Set the encryptedSecret property: Encrypted (using device public key) secret value.
     * 
     * @param encryptedSecret the encryptedSecret value to set.
     * @return the Secret object itself.
     */
    public Secret withEncryptedSecret(AsymmetricEncryptedSecret encryptedSecret) {
        this.encryptedSecret = encryptedSecret;
        return this;
    }

    /**
     * Get the keyVaultId property: Id of the Key-Vault where secret is stored (ex:
     * secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
     * 
     * @return the keyVaultId value.
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Set the keyVaultId property: Id of the Key-Vault where secret is stored (ex:
     * secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
     * 
     * @param keyVaultId the keyVaultId value to set.
     * @return the Secret object itself.
     */
    public Secret withKeyVaultId(String keyVaultId) {
        this.keyVaultId = keyVaultId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryptedSecret() != null) {
            encryptedSecret().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("encryptedSecret", this.encryptedSecret);
        jsonWriter.writeStringField("keyVaultId", this.keyVaultId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Secret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Secret if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Secret.
     */
    public static Secret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Secret deserializedSecret = new Secret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encryptedSecret".equals(fieldName)) {
                    deserializedSecret.encryptedSecret = AsymmetricEncryptedSecret.fromJson(reader);
                } else if ("keyVaultId".equals(fieldName)) {
                    deserializedSecret.keyVaultId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecret;
        });
    }
}
