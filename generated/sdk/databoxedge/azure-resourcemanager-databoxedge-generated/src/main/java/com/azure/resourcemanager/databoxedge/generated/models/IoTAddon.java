// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.AddonInner;
import com.azure.resourcemanager.databoxedge.generated.fluent.models.IoTAddonProperties;
import java.io.IOException;

/**
 * IoT Addon.
 */
@Fluent
public final class IoTAddon extends AddonInner {
    /*
     * Addon type.
     */
    private AddonType kind = AddonType.IOT_EDGE;

    /*
     * Properties specific to IOT addon.
     */
    private IoTAddonProperties innerProperties = new IoTAddonProperties();

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * Metadata pertaining to creation and last modification of Addon
     */
    private SystemData systemData;

    /**
     * Creates an instance of IoTAddon class.
     */
    public IoTAddon() {
    }

    /**
     * Get the kind property: Addon type.
     * 
     * @return the kind value.
     */
    @Override
    public AddonType kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: Properties specific to IOT addon.
     * 
     * @return the innerProperties value.
     */
    private IoTAddonProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of Addon.
     * 
     * @return the systemData value.
     */
    @Override
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     * 
     * @return the ioTDeviceDetails value.
     */
    public IoTDeviceInfo ioTDeviceDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().ioTDeviceDetails();
    }

    /**
     * Set the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     * 
     * @param ioTDeviceDetails the ioTDeviceDetails value to set.
     * @return the IoTAddon object itself.
     */
    public IoTAddon withIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IoTAddonProperties();
        }
        this.innerProperties().withIoTDeviceDetails(ioTDeviceDetails);
        return this;
    }

    /**
     * Get the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     * 
     * @return the ioTEdgeDeviceDetails value.
     */
    public IoTDeviceInfo ioTEdgeDeviceDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().ioTEdgeDeviceDetails();
    }

    /**
     * Set the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     * 
     * @param ioTEdgeDeviceDetails the ioTEdgeDeviceDetails value to set.
     * @return the IoTAddon object itself.
     */
    public IoTAddon withIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IoTAddonProperties();
        }
        this.innerProperties().withIoTEdgeDeviceDetails(ioTEdgeDeviceDetails);
        return this;
    }

    /**
     * Get the version property: Version of IoT running on the appliance.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Get the hostPlatform property: Host OS supported by the IoT addon.
     * 
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.innerProperties() == null ? null : this.innerProperties().hostPlatform();
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     * 
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.innerProperties() == null ? null : this.innerProperties().hostPlatformType();
    }

    /**
     * Get the provisioningState property: Addon Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public AddonState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property innerProperties in model IoTAddon"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTAddon.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTAddon from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTAddon if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IoTAddon.
     */
    public static IoTAddon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTAddon deserializedIoTAddon = new IoTAddon();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIoTAddon.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedIoTAddon.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedIoTAddon.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedIoTAddon.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedIoTAddon.innerProperties = IoTAddonProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    deserializedIoTAddon.kind = AddonType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTAddon;
        });
    }
}
