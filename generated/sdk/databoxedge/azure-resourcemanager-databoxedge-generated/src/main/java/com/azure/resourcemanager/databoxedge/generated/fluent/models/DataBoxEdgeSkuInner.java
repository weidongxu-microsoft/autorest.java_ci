// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.ShipmentType;
import com.azure.resourcemanager.databoxedge.generated.models.SkuAvailability;
import com.azure.resourcemanager.databoxedge.generated.models.SkuCapability;
import com.azure.resourcemanager.databoxedge.generated.models.SkuCost;
import com.azure.resourcemanager.databoxedge.generated.models.SkuLocationInfo;
import com.azure.resourcemanager.databoxedge.generated.models.SkuName;
import com.azure.resourcemanager.databoxedge.generated.models.SkuSignupOption;
import com.azure.resourcemanager.databoxedge.generated.models.SkuTier;
import com.azure.resourcemanager.databoxedge.generated.models.SkuVersion;
import java.io.IOException;
import java.util.List;

/**
 * The Sku information.
 */
@Immutable
public final class DataBoxEdgeSkuInner implements JsonSerializable<DataBoxEdgeSkuInner> {
    /*
     * The type of the resource.
     */
    private String resourceType;

    /*
     * The Sku name.
     */
    private SkuName name;

    /*
     * The Sku kind.
     */
    private String kind;

    /*
     * The Sku tier.
     */
    private SkuTier tier;

    /*
     * The Sku kind.
     */
    private String size;

    /*
     * The Sku family.
     */
    private String family;

    /*
     * Availability of the Sku for the region.
     */
    private List<String> locations;

    /*
     * The API versions in which Sku is available.
     */
    private List<String> apiVersions;

    /*
     * Availability of the Sku for the location/zone/site.
     */
    private List<SkuLocationInfo> locationInfo;

    /*
     * The pricing info of the Sku.
     */
    private List<SkuCost> costs;

    /*
     * Sku can be signed up by customer or not.
     */
    private SkuSignupOption signupOption;

    /*
     * Availability of the Sku as preview/stable.
     */
    private SkuVersion version;

    /*
     * Links to the next set of results
     */
    private SkuAvailability availability;

    /*
     * List of Shipment Types supported by this SKU
     */
    private List<ShipmentType> shipmentTypes;

    /*
     * The capability info of the SKU.
     */
    private List<SkuCapability> capabilities;

    /**
     * Creates an instance of DataBoxEdgeSkuInner class.
     */
    public DataBoxEdgeSkuInner() {
    }

    /**
     * Get the resourceType property: The type of the resource.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the name property: The Sku name.
     * 
     * @return the name value.
     */
    public SkuName name() {
        return this.name;
    }

    /**
     * Get the kind property: The Sku kind.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Get the tier property: The Sku tier.
     * 
     * @return the tier value.
     */
    public SkuTier tier() {
        return this.tier;
    }

    /**
     * Get the size property: The Sku kind.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Get the family property: The Sku family.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Get the locations property: Availability of the Sku for the region.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Get the apiVersions property: The API versions in which Sku is available.
     * 
     * @return the apiVersions value.
     */
    public List<String> apiVersions() {
        return this.apiVersions;
    }

    /**
     * Get the locationInfo property: Availability of the Sku for the location/zone/site.
     * 
     * @return the locationInfo value.
     */
    public List<SkuLocationInfo> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Get the costs property: The pricing info of the Sku.
     * 
     * @return the costs value.
     */
    public List<SkuCost> costs() {
        return this.costs;
    }

    /**
     * Get the signupOption property: Sku can be signed up by customer or not.
     * 
     * @return the signupOption value.
     */
    public SkuSignupOption signupOption() {
        return this.signupOption;
    }

    /**
     * Get the version property: Availability of the Sku as preview/stable.
     * 
     * @return the version value.
     */
    public SkuVersion version() {
        return this.version;
    }

    /**
     * Get the availability property: Links to the next set of results.
     * 
     * @return the availability value.
     */
    public SkuAvailability availability() {
        return this.availability;
    }

    /**
     * Get the shipmentTypes property: List of Shipment Types supported by this SKU.
     * 
     * @return the shipmentTypes value.
     */
    public List<ShipmentType> shipmentTypes() {
        return this.shipmentTypes;
    }

    /**
     * Get the capabilities property: The capability info of the SKU.
     * 
     * @return the capabilities value.
     */
    public List<SkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationInfo() != null) {
            locationInfo().forEach(e -> e.validate());
        }
        if (costs() != null) {
            costs().forEach(e -> e.validate());
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataBoxEdgeSkuInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataBoxEdgeSkuInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataBoxEdgeSkuInner.
     */
    public static DataBoxEdgeSkuInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataBoxEdgeSkuInner deserializedDataBoxEdgeSkuInner = new DataBoxEdgeSkuInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.resourceType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.name = SkuName.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.kind = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.tier = SkuTier.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.size = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.family = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataBoxEdgeSkuInner.locations = locations;
                } else if ("apiVersions".equals(fieldName)) {
                    List<String> apiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataBoxEdgeSkuInner.apiVersions = apiVersions;
                } else if ("locationInfo".equals(fieldName)) {
                    List<SkuLocationInfo> locationInfo = reader.readArray(reader1 -> SkuLocationInfo.fromJson(reader1));
                    deserializedDataBoxEdgeSkuInner.locationInfo = locationInfo;
                } else if ("costs".equals(fieldName)) {
                    List<SkuCost> costs = reader.readArray(reader1 -> SkuCost.fromJson(reader1));
                    deserializedDataBoxEdgeSkuInner.costs = costs;
                } else if ("signupOption".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.signupOption = SkuSignupOption.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.version = SkuVersion.fromString(reader.getString());
                } else if ("availability".equals(fieldName)) {
                    deserializedDataBoxEdgeSkuInner.availability = SkuAvailability.fromString(reader.getString());
                } else if ("shipmentTypes".equals(fieldName)) {
                    List<ShipmentType> shipmentTypes
                        = reader.readArray(reader1 -> ShipmentType.fromString(reader1.getString()));
                    deserializedDataBoxEdgeSkuInner.shipmentTypes = shipmentTypes;
                } else if ("capabilities".equals(fieldName)) {
                    List<SkuCapability> capabilities = reader.readArray(reader1 -> SkuCapability.fromJson(reader1));
                    deserializedDataBoxEdgeSkuInner.capabilities = capabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataBoxEdgeSkuInner;
        });
    }
}
