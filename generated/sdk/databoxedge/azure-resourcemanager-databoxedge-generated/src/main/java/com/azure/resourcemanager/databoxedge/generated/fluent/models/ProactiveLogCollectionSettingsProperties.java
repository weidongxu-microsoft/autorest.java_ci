// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.generated.models.ProactiveDiagnosticsConsent;
import java.io.IOException;

/**
 * The properties of proactive log collection settings.
 */
@Fluent
public final class ProactiveLogCollectionSettingsProperties
    implements JsonSerializable<ProactiveLogCollectionSettingsProperties> {
    /*
     * Proactive diagnostic collection consent flag
     */
    private ProactiveDiagnosticsConsent userConsent;

    /**
     * Creates an instance of ProactiveLogCollectionSettingsProperties class.
     */
    public ProactiveLogCollectionSettingsProperties() {
    }

    /**
     * Get the userConsent property: Proactive diagnostic collection consent flag.
     * 
     * @return the userConsent value.
     */
    public ProactiveDiagnosticsConsent userConsent() {
        return this.userConsent;
    }

    /**
     * Set the userConsent property: Proactive diagnostic collection consent flag.
     * 
     * @param userConsent the userConsent value to set.
     * @return the ProactiveLogCollectionSettingsProperties object itself.
     */
    public ProactiveLogCollectionSettingsProperties withUserConsent(ProactiveDiagnosticsConsent userConsent) {
        this.userConsent = userConsent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (userConsent() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userConsent in model ProactiveLogCollectionSettingsProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProactiveLogCollectionSettingsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userConsent", this.userConsent == null ? null : this.userConsent.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProactiveLogCollectionSettingsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProactiveLogCollectionSettingsProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProactiveLogCollectionSettingsProperties.
     */
    public static ProactiveLogCollectionSettingsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProactiveLogCollectionSettingsProperties deserializedProactiveLogCollectionSettingsProperties
                = new ProactiveLogCollectionSettingsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userConsent".equals(fieldName)) {
                    deserializedProactiveLogCollectionSettingsProperties.userConsent
                        = ProactiveDiagnosticsConsent.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProactiveLogCollectionSettingsProperties;
        });
    }
}
