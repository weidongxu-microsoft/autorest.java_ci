// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dns.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.resourcemanager.dns.generated.models.AaaaRecord;
import com.azure.resourcemanager.dns.generated.models.ARecord;
import com.azure.resourcemanager.dns.generated.models.CaaRecord;
import com.azure.resourcemanager.dns.generated.models.CnameRecord;
import com.azure.resourcemanager.dns.generated.models.DsRecord;
import com.azure.resourcemanager.dns.generated.models.MxRecord;
import com.azure.resourcemanager.dns.generated.models.NaptrRecord;
import com.azure.resourcemanager.dns.generated.models.NsRecord;
import com.azure.resourcemanager.dns.generated.models.PtrRecord;
import com.azure.resourcemanager.dns.generated.models.SoaRecord;
import com.azure.resourcemanager.dns.generated.models.SrvRecord;
import com.azure.resourcemanager.dns.generated.models.TlsaRecord;
import com.azure.resourcemanager.dns.generated.models.TxtRecord;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Represents the properties of the records in the record set.
 */
@Fluent
public final class RecordSetProperties {
    /*
     * The metadata attached to the record set.
     */
    @JsonProperty(value = "metadata")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> metadata;

    /*
     * The TTL (time-to-live) of the records in the record set.
     */
    @JsonProperty(value = "TTL")
    private Long ttl;

    /*
     * Fully qualified domain name of the record set.
     */
    @JsonProperty(value = "fqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String fqdn;

    /*
     * provisioning State of the record set.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * A reference to an azure resource from where the dns resource value is taken.
     */
    @JsonProperty(value = "targetResource")
    private SubResource targetResource;

    /*
     * A reference to an azure traffic manager profile resource from where the dns resource value is taken.
     */
    @JsonProperty(value = "trafficManagementProfile")
    private SubResource trafficManagementProfile;

    /*
     * The list of A records in the record set.
     */
    @JsonProperty(value = "ARecords")
    private List<ARecord> aRecords;

    /*
     * The list of AAAA records in the record set.
     */
    @JsonProperty(value = "AAAARecords")
    private List<AaaaRecord> aaaaRecords;

    /*
     * The list of MX records in the record set.
     */
    @JsonProperty(value = "MXRecords")
    private List<MxRecord> mxRecords;

    /*
     * The list of NS records in the record set.
     */
    @JsonProperty(value = "NSRecords")
    private List<NsRecord> nsRecords;

    /*
     * The list of PTR records in the record set.
     */
    @JsonProperty(value = "PTRRecords")
    private List<PtrRecord> ptrRecords;

    /*
     * The list of SRV records in the record set.
     */
    @JsonProperty(value = "SRVRecords")
    private List<SrvRecord> srvRecords;

    /*
     * The list of TXT records in the record set.
     */
    @JsonProperty(value = "TXTRecords")
    private List<TxtRecord> txtRecords;

    /*
     * The CNAME record in the  record set.
     */
    @JsonProperty(value = "CNAMERecord")
    private CnameRecord cnameRecord;

    /*
     * The SOA record in the record set.
     */
    @JsonProperty(value = "SOARecord")
    private SoaRecord soaRecord;

    /*
     * The list of CAA records in the record set.
     */
    @JsonProperty(value = "caaRecords")
    private List<CaaRecord> caaRecords;

    /*
     * The list of DS records in the record set.
     */
    @JsonProperty(value = "DSRecords")
    private List<DsRecord> dsRecords;

    /*
     * The list of TLSA records in the record set.
     */
    @JsonProperty(value = "TLSARecords")
    private List<TlsaRecord> tlsaRecords;

    /*
     * The list of NAPTR records in the record set.
     */
    @JsonProperty(value = "NAPTRRecords")
    private List<NaptrRecord> naptrRecords;

    /**
     * Creates an instance of RecordSetProperties class.
     */
    public RecordSetProperties() {
    }

    /**
     * Get the metadata property: The metadata attached to the record set.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata attached to the record set.
     * 
     * @param metadata the metadata value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the ttl property: The TTL (time-to-live) of the records in the record set.
     * 
     * @return the ttl value.
     */
    public Long ttl() {
        return this.ttl;
    }

    /**
     * Set the ttl property: The TTL (time-to-live) of the records in the record set.
     * 
     * @param ttl the ttl value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }

    /**
     * Get the fqdn property: Fully qualified domain name of the record set.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the provisioningState property: provisioning State of the record set.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the targetResource property: A reference to an azure resource from where the dns resource value is taken.
     * 
     * @return the targetResource value.
     */
    public SubResource targetResource() {
        return this.targetResource;
    }

    /**
     * Set the targetResource property: A reference to an azure resource from where the dns resource value is taken.
     * 
     * @param targetResource the targetResource value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withTargetResource(SubResource targetResource) {
        this.targetResource = targetResource;
        return this;
    }

    /**
     * Get the trafficManagementProfile property: A reference to an azure traffic manager profile resource from where
     * the dns resource value is taken.
     * 
     * @return the trafficManagementProfile value.
     */
    public SubResource trafficManagementProfile() {
        return this.trafficManagementProfile;
    }

    /**
     * Set the trafficManagementProfile property: A reference to an azure traffic manager profile resource from where
     * the dns resource value is taken.
     * 
     * @param trafficManagementProfile the trafficManagementProfile value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withTrafficManagementProfile(SubResource trafficManagementProfile) {
        this.trafficManagementProfile = trafficManagementProfile;
        return this;
    }

    /**
     * Get the aRecords property: The list of A records in the record set.
     * 
     * @return the aRecords value.
     */
    public List<ARecord> aRecords() {
        return this.aRecords;
    }

    /**
     * Set the aRecords property: The list of A records in the record set.
     * 
     * @param aRecords the aRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withARecords(List<ARecord> aRecords) {
        this.aRecords = aRecords;
        return this;
    }

    /**
     * Get the aaaaRecords property: The list of AAAA records in the record set.
     * 
     * @return the aaaaRecords value.
     */
    public List<AaaaRecord> aaaaRecords() {
        return this.aaaaRecords;
    }

    /**
     * Set the aaaaRecords property: The list of AAAA records in the record set.
     * 
     * @param aaaaRecords the aaaaRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withAaaaRecords(List<AaaaRecord> aaaaRecords) {
        this.aaaaRecords = aaaaRecords;
        return this;
    }

    /**
     * Get the mxRecords property: The list of MX records in the record set.
     * 
     * @return the mxRecords value.
     */
    public List<MxRecord> mxRecords() {
        return this.mxRecords;
    }

    /**
     * Set the mxRecords property: The list of MX records in the record set.
     * 
     * @param mxRecords the mxRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withMxRecords(List<MxRecord> mxRecords) {
        this.mxRecords = mxRecords;
        return this;
    }

    /**
     * Get the nsRecords property: The list of NS records in the record set.
     * 
     * @return the nsRecords value.
     */
    public List<NsRecord> nsRecords() {
        return this.nsRecords;
    }

    /**
     * Set the nsRecords property: The list of NS records in the record set.
     * 
     * @param nsRecords the nsRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withNsRecords(List<NsRecord> nsRecords) {
        this.nsRecords = nsRecords;
        return this;
    }

    /**
     * Get the ptrRecords property: The list of PTR records in the record set.
     * 
     * @return the ptrRecords value.
     */
    public List<PtrRecord> ptrRecords() {
        return this.ptrRecords;
    }

    /**
     * Set the ptrRecords property: The list of PTR records in the record set.
     * 
     * @param ptrRecords the ptrRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withPtrRecords(List<PtrRecord> ptrRecords) {
        this.ptrRecords = ptrRecords;
        return this;
    }

    /**
     * Get the srvRecords property: The list of SRV records in the record set.
     * 
     * @return the srvRecords value.
     */
    public List<SrvRecord> srvRecords() {
        return this.srvRecords;
    }

    /**
     * Set the srvRecords property: The list of SRV records in the record set.
     * 
     * @param srvRecords the srvRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withSrvRecords(List<SrvRecord> srvRecords) {
        this.srvRecords = srvRecords;
        return this;
    }

    /**
     * Get the txtRecords property: The list of TXT records in the record set.
     * 
     * @return the txtRecords value.
     */
    public List<TxtRecord> txtRecords() {
        return this.txtRecords;
    }

    /**
     * Set the txtRecords property: The list of TXT records in the record set.
     * 
     * @param txtRecords the txtRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withTxtRecords(List<TxtRecord> txtRecords) {
        this.txtRecords = txtRecords;
        return this;
    }

    /**
     * Get the cnameRecord property: The CNAME record in the record set.
     * 
     * @return the cnameRecord value.
     */
    public CnameRecord cnameRecord() {
        return this.cnameRecord;
    }

    /**
     * Set the cnameRecord property: The CNAME record in the record set.
     * 
     * @param cnameRecord the cnameRecord value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withCnameRecord(CnameRecord cnameRecord) {
        this.cnameRecord = cnameRecord;
        return this;
    }

    /**
     * Get the soaRecord property: The SOA record in the record set.
     * 
     * @return the soaRecord value.
     */
    public SoaRecord soaRecord() {
        return this.soaRecord;
    }

    /**
     * Set the soaRecord property: The SOA record in the record set.
     * 
     * @param soaRecord the soaRecord value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withSoaRecord(SoaRecord soaRecord) {
        this.soaRecord = soaRecord;
        return this;
    }

    /**
     * Get the caaRecords property: The list of CAA records in the record set.
     * 
     * @return the caaRecords value.
     */
    public List<CaaRecord> caaRecords() {
        return this.caaRecords;
    }

    /**
     * Set the caaRecords property: The list of CAA records in the record set.
     * 
     * @param caaRecords the caaRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withCaaRecords(List<CaaRecord> caaRecords) {
        this.caaRecords = caaRecords;
        return this;
    }

    /**
     * Get the dsRecords property: The list of DS records in the record set.
     * 
     * @return the dsRecords value.
     */
    public List<DsRecord> dsRecords() {
        return this.dsRecords;
    }

    /**
     * Set the dsRecords property: The list of DS records in the record set.
     * 
     * @param dsRecords the dsRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withDsRecords(List<DsRecord> dsRecords) {
        this.dsRecords = dsRecords;
        return this;
    }

    /**
     * Get the tlsaRecords property: The list of TLSA records in the record set.
     * 
     * @return the tlsaRecords value.
     */
    public List<TlsaRecord> tlsaRecords() {
        return this.tlsaRecords;
    }

    /**
     * Set the tlsaRecords property: The list of TLSA records in the record set.
     * 
     * @param tlsaRecords the tlsaRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withTlsaRecords(List<TlsaRecord> tlsaRecords) {
        this.tlsaRecords = tlsaRecords;
        return this;
    }

    /**
     * Get the naptrRecords property: The list of NAPTR records in the record set.
     * 
     * @return the naptrRecords value.
     */
    public List<NaptrRecord> naptrRecords() {
        return this.naptrRecords;
    }

    /**
     * Set the naptrRecords property: The list of NAPTR records in the record set.
     * 
     * @param naptrRecords the naptrRecords value to set.
     * @return the RecordSetProperties object itself.
     */
    public RecordSetProperties withNaptrRecords(List<NaptrRecord> naptrRecords) {
        this.naptrRecords = naptrRecords;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aRecords() != null) {
            aRecords().forEach(e -> e.validate());
        }
        if (aaaaRecords() != null) {
            aaaaRecords().forEach(e -> e.validate());
        }
        if (mxRecords() != null) {
            mxRecords().forEach(e -> e.validate());
        }
        if (nsRecords() != null) {
            nsRecords().forEach(e -> e.validate());
        }
        if (ptrRecords() != null) {
            ptrRecords().forEach(e -> e.validate());
        }
        if (srvRecords() != null) {
            srvRecords().forEach(e -> e.validate());
        }
        if (txtRecords() != null) {
            txtRecords().forEach(e -> e.validate());
        }
        if (cnameRecord() != null) {
            cnameRecord().validate();
        }
        if (soaRecord() != null) {
            soaRecord().validate();
        }
        if (caaRecords() != null) {
            caaRecords().forEach(e -> e.validate());
        }
        if (dsRecords() != null) {
            dsRecords().forEach(e -> e.validate());
        }
        if (tlsaRecords() != null) {
            tlsaRecords().forEach(e -> e.validate());
        }
        if (naptrRecords() != null) {
            naptrRecords().forEach(e -> e.validate());
        }
    }
}
