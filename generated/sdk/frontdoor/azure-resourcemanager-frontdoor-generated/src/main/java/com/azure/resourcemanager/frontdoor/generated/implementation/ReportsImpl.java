// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.frontdoor.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.frontdoor.generated.fluent.ReportsClient;
import com.azure.resourcemanager.frontdoor.generated.fluent.models.LatencyScorecardInner;
import com.azure.resourcemanager.frontdoor.generated.fluent.models.TimeseriesInner;
import com.azure.resourcemanager.frontdoor.generated.models.LatencyScorecard;
import com.azure.resourcemanager.frontdoor.generated.models.LatencyScorecardAggregationInterval;
import com.azure.resourcemanager.frontdoor.generated.models.Reports;
import com.azure.resourcemanager.frontdoor.generated.models.Timeseries;
import com.azure.resourcemanager.frontdoor.generated.models.TimeseriesAggregationInterval;
import com.azure.resourcemanager.frontdoor.generated.models.TimeseriesType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.OffsetDateTime;

public final class ReportsImpl implements Reports {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ReportsImpl.class);

    private final ReportsClient innerClient;

    private final com.azure.resourcemanager.frontdoor.generated.FrontDoorManager serviceManager;

    public ReportsImpl(
        ReportsClient innerClient, com.azure.resourcemanager.frontdoor.generated.FrontDoorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LatencyScorecard getLatencyScorecards(
        String resourceGroupName,
        String profileName,
        String experimentName,
        LatencyScorecardAggregationInterval aggregationInterval) {
        LatencyScorecardInner inner =
            this
                .serviceClient()
                .getLatencyScorecards(resourceGroupName, profileName, experimentName, aggregationInterval);
        if (inner != null) {
            return new LatencyScorecardImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LatencyScorecard> getLatencyScorecardsWithResponse(
        String resourceGroupName,
        String profileName,
        String experimentName,
        LatencyScorecardAggregationInterval aggregationInterval,
        String endDateTimeUtc,
        String country,
        Context context) {
        Response<LatencyScorecardInner> inner =
            this
                .serviceClient()
                .getLatencyScorecardsWithResponse(
                    resourceGroupName,
                    profileName,
                    experimentName,
                    aggregationInterval,
                    endDateTimeUtc,
                    country,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LatencyScorecardImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Timeseries getTimeseries(
        String resourceGroupName,
        String profileName,
        String experimentName,
        OffsetDateTime startDateTimeUtc,
        OffsetDateTime endDateTimeUtc,
        TimeseriesAggregationInterval aggregationInterval,
        TimeseriesType timeseriesType) {
        TimeseriesInner inner =
            this
                .serviceClient()
                .getTimeseries(
                    resourceGroupName,
                    profileName,
                    experimentName,
                    startDateTimeUtc,
                    endDateTimeUtc,
                    aggregationInterval,
                    timeseriesType);
        if (inner != null) {
            return new TimeseriesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Timeseries> getTimeseriesWithResponse(
        String resourceGroupName,
        String profileName,
        String experimentName,
        OffsetDateTime startDateTimeUtc,
        OffsetDateTime endDateTimeUtc,
        TimeseriesAggregationInterval aggregationInterval,
        TimeseriesType timeseriesType,
        String endpointParam,
        String country,
        Context context) {
        Response<TimeseriesInner> inner =
            this
                .serviceClient()
                .getTimeseriesWithResponse(
                    resourceGroupName,
                    profileName,
                    experimentName,
                    startDateTimeUtc,
                    endDateTimeUtc,
                    aggregationInterval,
                    timeseriesType,
                    endpointParam,
                    country,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TimeseriesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ReportsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.frontdoor.generated.FrontDoorManager manager() {
        return this.serviceManager;
    }
}
